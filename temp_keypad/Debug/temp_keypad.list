
temp_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002930  08005380  08005380  00006380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb0  08007cb0  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb0  08007cb0  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb0  08007cb0  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb0  08007cb0  00008cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cb4  08007cb4  00008cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007cb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000074  08007d2c  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08007d2c  000096d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9ea  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf5  00000000  00000000  00014a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00016780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7f  00000000  00000000  000174e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f24  00000000  00000000  00017f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff46  00000000  00000000  0002fe83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad72  00000000  00000000  0003fdc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cab3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004000  00000000  00000000  000cab80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000ceb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005368 	.word	0x08005368

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005368 	.word	0x08005368

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	@ 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c3a:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	@ 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	@ 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__aeabi_f2uiz>:
 8000e88:	0042      	lsls	r2, r0, #1
 8000e8a:	d20e      	bcs.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e90:	d30b      	bcc.n	8000eaa <__aeabi_f2uiz+0x22>
 8000e92:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e9a:	d409      	bmi.n	8000eb0 <__aeabi_f2uiz+0x28>
 8000e9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ea0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ea4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	4770      	bx	lr
 8000eb0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000eb4:	d101      	bne.n	8000eba <__aeabi_f2uiz+0x32>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d102      	bne.n	8000ec0 <__aeabi_f2uiz+0x38>
 8000eba:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebe:	4770      	bx	lr
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <microDelay>:
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <microDelay+0x2c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000eda:	bf00      	nop
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <microDelay+0x2c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d3f9      	bcc.n	8000edc <microDelay+0x14>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	200000e4 	.word	0x200000e4

08000ef8 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	482c      	ldr	r0, [pc, #176]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f26:	f001 febd 	bl	8002ca4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f30:	4829      	ldr	r0, [pc, #164]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f32:	f002 f852 	bl	8002fda <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000f36:	2014      	movs	r0, #20
 8000f38:	f001 fd82 	bl	8002a40 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f42:	4825      	ldr	r0, [pc, #148]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f44:	f002 f849 	bl	8002fda <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000f48:	201e      	movs	r0, #30
 8000f4a:	f7ff ffbd 	bl	8000ec8 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481f      	ldr	r0, [pc, #124]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f5c:	f001 fea2 	bl	8002ca4 <HAL_GPIO_Init>
  microDelay (40);
 8000f60:	2028      	movs	r0, #40	@ 0x28
 8000f62:	f7ff ffb1 	bl	8000ec8 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000f66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f6a:	481b      	ldr	r0, [pc, #108]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f6c:	f002 f81e 	bl	8002fac <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <DHT11_Start+0x98>
  {
    microDelay (80);
 8000f76:	2050      	movs	r0, #80	@ 0x50
 8000f78:	f7ff ffa6 	bl	8000ec8 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000f7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f80:	4815      	ldr	r0, [pc, #84]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000f82:	f002 f813 	bl	8002fac <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <DHT11_Start+0x98>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000f90:	f001 fd4c 	bl	8002a2c <HAL_GetTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <DHT11_Start+0xe4>)
 8000f98:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000f9a:	f001 fd47 	bl	8002a2c <HAL_GetTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <DHT11_Start+0xe8>)
 8000fa2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fa4:	e004      	b.n	8000fb0 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000fa6:	f001 fd41 	bl	8002a2c <HAL_GetTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <DHT11_Start+0xe8>)
 8000fae:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <DHT11_Start+0xe0>)
 8000fb6:	f001 fff9 	bl	8002fac <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <DHT11_Start+0xd6>
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <DHT11_Start+0xe4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	1c9a      	adds	r2, r3, #2
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <DHT11_Start+0xe8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8eb      	bhi.n	8000fa6 <DHT11_Start+0xae>
  }
  return Response;
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	20000158 	.word	0x20000158
 8000fe0:	2000015c 	.word	0x2000015c

08000fe4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e066      	b.n	80010be <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000ff0:	f001 fd1c 	bl	8002a2c <HAL_GetTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a36      	ldr	r2, [pc, #216]	@ (80010d0 <DHT11_Read+0xec>)
 8000ff8:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000ffa:	f001 fd17 	bl	8002a2c <HAL_GetTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a34      	ldr	r2, [pc, #208]	@ (80010d4 <DHT11_Read+0xf0>)
 8001002:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001004:	e004      	b.n	8001010 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001006:	f001 fd11 	bl	8002a2c <HAL_GetTick>
 800100a:	4603      	mov	r3, r0
 800100c:	4a31      	ldr	r2, [pc, #196]	@ (80010d4 <DHT11_Read+0xf0>)
 800100e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001010:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001014:	4830      	ldr	r0, [pc, #192]	@ (80010d8 <DHT11_Read+0xf4>)
 8001016:	f001 ffc9 	bl	8002fac <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d106      	bne.n	800102e <DHT11_Read+0x4a>
 8001020:	4b2b      	ldr	r3, [pc, #172]	@ (80010d0 <DHT11_Read+0xec>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1c9a      	adds	r2, r3, #2
 8001026:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <DHT11_Read+0xf0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d8eb      	bhi.n	8001006 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800102e:	2028      	movs	r0, #40	@ 0x28
 8001030:	f7ff ff4a 	bl	8000ec8 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001034:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001038:	4827      	ldr	r0, [pc, #156]	@ (80010d8 <DHT11_Read+0xf4>)
 800103a:	f001 ffb7 	bl	8002fac <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10e      	bne.n	8001062 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2201      	movs	r2, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	b25b      	sxtb	r3, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	b25a      	sxtb	r2, r3
 8001056:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800105a:	4013      	ands	r3, r2
 800105c:	b25b      	sxtb	r3, r3
 800105e:	71bb      	strb	r3, [r7, #6]
 8001060:	e00b      	b.n	800107a <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f1c3 0307 	rsb	r3, r3, #7
 8001068:	2201      	movs	r2, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	b25a      	sxtb	r2, r3
 8001070:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001074:	4313      	orrs	r3, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800107a:	f001 fcd7 	bl	8002a2c <HAL_GetTick>
 800107e:	4603      	mov	r3, r0
 8001080:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <DHT11_Read+0xec>)
 8001082:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001084:	f001 fcd2 	bl	8002a2c <HAL_GetTick>
 8001088:	4603      	mov	r3, r0
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <DHT11_Read+0xf0>)
 800108c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800108e:	e004      	b.n	800109a <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001090:	f001 fccc 	bl	8002a2c <HAL_GetTick>
 8001094:	4603      	mov	r3, r0
 8001096:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <DHT11_Read+0xf0>)
 8001098:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800109a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109e:	480e      	ldr	r0, [pc, #56]	@ (80010d8 <DHT11_Read+0xf4>)
 80010a0:	f001 ff84 	bl	8002fac <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <DHT11_Read+0xd4>
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <DHT11_Read+0xec>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1c9a      	adds	r2, r3, #2
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <DHT11_Read+0xf0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8eb      	bhi.n	8001090 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	3301      	adds	r3, #1
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d995      	bls.n	8000ff0 <DHT11_Read+0xc>
    }
  }
  return b;
 80010c4:	79bb      	ldrb	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000158 	.word	0x20000158
 80010d4:	2000015c 	.word	0x2000015c
 80010d8:	40010800 	.word	0x40010800
 80010dc:	00000000 	.word	0x00000000

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f001 fc49 	bl	800297c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f8f9 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 f9bb 	bl	8001468 <MX_GPIO_Init>
  MX_I2C2_Init();
 80010f2:	f000 f93b 	bl	800136c <MX_I2C2_Init>
  MX_TIM1_Init();
 80010f6:	f000 f967 	bl	80013c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001100:	4869      	ldr	r0, [pc, #420]	@ (80012a8 <main+0x1c8>)
 8001102:	f001 ff6a 	bl	8002fda <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001106:	2201      	movs	r2, #1
 8001108:	2108      	movs	r1, #8
 800110a:	4868      	ldr	r0, [pc, #416]	@ (80012ac <main+0x1cc>)
 800110c:	f001 ff65 	bl	8002fda <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	4865      	ldr	r0, [pc, #404]	@ (80012ac <main+0x1cc>)
 8001116:	f001 ff60 	bl	8002fda <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	2120      	movs	r1, #32
 800111e:	4863      	ldr	r0, [pc, #396]	@ (80012ac <main+0x1cc>)
 8001120:	f001 ff5b 	bl	8002fda <HAL_GPIO_WritePin>

  SSD1306_Init();
 8001124:	f000 fe68 	bl	8001df8 <SSD1306_Init>

  SSD1306_GotoXY (24,0);
 8001128:	2100      	movs	r1, #0
 800112a:	2018      	movs	r0, #24
 800112c:	f000 ffcc 	bl	80020c8 <SSD1306_GotoXY>
  SSD1306_Puts ("DEM-C", &Font_16x26, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	495f      	ldr	r1, [pc, #380]	@ (80012b0 <main+0x1d0>)
 8001134:	485f      	ldr	r0, [pc, #380]	@ (80012b4 <main+0x1d4>)
 8001136:	f001 f85b 	bl	80021f0 <SSD1306_Puts>
  SSD1306_GotoXY (25, 30);
 800113a:	211e      	movs	r1, #30
 800113c:	2019      	movs	r0, #25
 800113e:	f000 ffc3 	bl	80020c8 <SSD1306_GotoXY>
  SSD1306_Puts ("Environment", &Font_7x10, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	495c      	ldr	r1, [pc, #368]	@ (80012b8 <main+0x1d8>)
 8001146:	485d      	ldr	r0, [pc, #372]	@ (80012bc <main+0x1dc>)
 8001148:	f001 f852 	bl	80021f0 <SSD1306_Puts>
  SSD1306_GotoXY (39, 42);
 800114c:	212a      	movs	r1, #42	@ 0x2a
 800114e:	2027      	movs	r0, #39	@ 0x27
 8001150:	f000 ffba 	bl	80020c8 <SSD1306_GotoXY>
  SSD1306_Puts ("Monitor", &Font_7x10, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	4958      	ldr	r1, [pc, #352]	@ (80012b8 <main+0x1d8>)
 8001158:	4859      	ldr	r0, [pc, #356]	@ (80012c0 <main+0x1e0>)
 800115a:	f001 f849 	bl	80021f0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800115e:	f000 ff0f 	bl	8001f80 <SSD1306_UpdateScreen>
  HAL_Delay(3000);
 8001162:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001166:	f001 fc6b 	bl	8002a40 <HAL_Delay>
  SSD1306_Clear();
 800116a:	f001 fa35 	bl	80025d8 <SSD1306_Clear>

  HAL_TIM_Base_Start(&htim1);
 800116e:	4855      	ldr	r0, [pc, #340]	@ (80012c4 <main+0x1e4>)
 8001170:	f003 f97a 	bl	8004468 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117a:	484b      	ldr	r0, [pc, #300]	@ (80012a8 <main+0x1c8>)
 800117c:	f001 ff2d 	bl	8002fda <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  cMillis = HAL_GetTick();
 8001180:	f001 fc54 	bl	8002a2c <HAL_GetTick>
 8001184:	4603      	mov	r3, r0
 8001186:	4a50      	ldr	r2, [pc, #320]	@ (80012c8 <main+0x1e8>)
 8001188:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001190:	4845      	ldr	r0, [pc, #276]	@ (80012a8 <main+0x1c8>)
 8001192:	f001 ff22 	bl	8002fda <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001196:	4b4b      	ldr	r3, [pc, #300]	@ (80012c4 <main+0x1e4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 800119e:	bf00      	nop
 80011a0:	4b48      	ldr	r3, [pc, #288]	@ (80012c4 <main+0x1e4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a6:	2b09      	cmp	r3, #9
 80011a8:	d9fa      	bls.n	80011a0 <main+0xc0>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011b0:	483d      	ldr	r0, [pc, #244]	@ (80012a8 <main+0x1c8>)
 80011b2:	f001 ff12 	bl	8002fda <HAL_GPIO_WritePin>

	  pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80011b6:	f001 fc39 	bl	8002a2c <HAL_GetTick>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a43      	ldr	r2, [pc, #268]	@ (80012cc <main+0x1ec>)
 80011be:	6013      	str	r3, [r2, #0]
	  // wait for the echo pin to go high
	  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80011c0:	bf00      	nop
 80011c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c6:	4838      	ldr	r0, [pc, #224]	@ (80012a8 <main+0x1c8>)
 80011c8:	f001 fef0 	bl	8002fac <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d108      	bne.n	80011e4 <main+0x104>
 80011d2:	4b3e      	ldr	r3, [pc, #248]	@ (80012cc <main+0x1ec>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f103 040a 	add.w	r4, r3, #10
 80011da:	f001 fc27 	bl	8002a2c <HAL_GetTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	429c      	cmp	r4, r3
 80011e2:	d8ee      	bhi.n	80011c2 <main+0xe2>
	  Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80011e4:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <main+0x1e4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ea:	4a39      	ldr	r2, [pc, #228]	@ (80012d0 <main+0x1f0>)
 80011ec:	6013      	str	r3, [r2, #0]

	  pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80011ee:	f001 fc1d 	bl	8002a2c <HAL_GetTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a35      	ldr	r2, [pc, #212]	@ (80012cc <main+0x1ec>)
 80011f6:	6013      	str	r3, [r2, #0]
	  // wait for the echo pin to go low
	  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80011f8:	bf00      	nop
 80011fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fe:	482a      	ldr	r0, [pc, #168]	@ (80012a8 <main+0x1c8>)
 8001200:	f001 fed4 	bl	8002fac <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d008      	beq.n	800121c <main+0x13c>
 800120a:	4b30      	ldr	r3, [pc, #192]	@ (80012cc <main+0x1ec>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8001212:	f001 fc0b 	bl	8002a2c <HAL_GetTick>
 8001216:	4603      	mov	r3, r0
 8001218:	429c      	cmp	r4, r3
 800121a:	d8ee      	bhi.n	80011fa <main+0x11a>
	  Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 800121c:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <main+0x1e4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	4a2c      	ldr	r2, [pc, #176]	@ (80012d4 <main+0x1f4>)
 8001224:	6013      	str	r3, [r2, #0]

	  Distance = (Value2-Value1)* 0.034/2;
 8001226:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <main+0x1f4>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <main+0x1f0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f8cf 	bl	80003d4 <__aeabi_ui2d>
 8001236:	a31a      	add	r3, pc, #104	@ (adr r3, 80012a0 <main+0x1c0>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f944 	bl	80004c8 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001250:	f7ff fa64 	bl	800071c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fb46 	bl	80008ec <__aeabi_d2uiz>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <main+0x1f8>)
 8001266:	801a      	strh	r2, [r3, #0]

	  itoa(Distance, snum, 10);
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <main+0x1f8>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	463b      	mov	r3, r7
 8001270:	220a      	movs	r2, #10
 8001272:	4619      	mov	r1, r3
 8001274:	f003 fb84 	bl	8004980 <itoa>
//		  SSD1306_UpdateScreen();
//	  }
//	  clearFlag=0;
//	  SSD1306_UpdateScreen();

	  	  if (Distance >= 10){
 8001278:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <main+0x1f8>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	2b09      	cmp	r3, #9
 800127e:	d90b      	bls.n	8001298 <main+0x1b8>
//	  		  SSD1306_Clear();
	  		  SSD1306_GotoXY (106, 52);
 8001280:	2134      	movs	r1, #52	@ 0x34
 8001282:	206a      	movs	r0, #106	@ 0x6a
 8001284:	f000 ff20 	bl	80020c8 <SSD1306_GotoXY>
	  		  SSD1306_Puts ("OFF", &Font_7x10, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	490b      	ldr	r1, [pc, #44]	@ (80012b8 <main+0x1d8>)
 800128c:	4813      	ldr	r0, [pc, #76]	@ (80012dc <main+0x1fc>)
 800128e:	f000 ffaf 	bl	80021f0 <SSD1306_Puts>

	  		  SSD1306_UpdateScreen();
 8001292:	f000 fe75 	bl	8001f80 <SSD1306_UpdateScreen>
 8001296:	e773      	b.n	8001180 <main+0xa0>
	  	  }else{
//	  		SSD1306_Clear();
	  		DashboardScreen();
 8001298:	f000 fb4e 	bl	8001938 <DashboardScreen>
	  cMillis = HAL_GetTick();
 800129c:	e770      	b.n	8001180 <main+0xa0>
 800129e:	bf00      	nop
 80012a0:	b020c49c 	.word	0xb020c49c
 80012a4:	3fa16872 	.word	0x3fa16872
 80012a8:	40010800 	.word	0x40010800
 80012ac:	40010c00 	.word	0x40010c00
 80012b0:	20000010 	.word	0x20000010
 80012b4:	08005380 	.word	0x08005380
 80012b8:	20000000 	.word	0x20000000
 80012bc:	08005388 	.word	0x08005388
 80012c0:	08005394 	.word	0x08005394
 80012c4:	200000e4 	.word	0x200000e4
 80012c8:	2000015c 	.word	0x2000015c
 80012cc:	20000158 	.word	0x20000158
 80012d0:	20000148 	.word	0x20000148
 80012d4:	2000014c 	.word	0x2000014c
 80012d8:	20000150 	.word	0x20000150
 80012dc:	0800539c 	.word	0x0800539c

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	@ 0x40
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	2228      	movs	r2, #40	@ 0x28
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fbaa 	bl	8004a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001302:	2301      	movs	r3, #1
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800131c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fc51 	bl	8003bd0 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001334:	f000 fd5a 	bl	8001dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2102      	movs	r1, #2
 8001352:	4618      	mov	r0, r3
 8001354:	f002 febe 	bl	80040d4 <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800135e:	f000 fd45 	bl	8001dec <Error_Handler>
  }
}
 8001362:	bf00      	nop
 8001364:	3740      	adds	r7, #64	@ 0x40
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001372:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <MX_I2C2_Init+0x54>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001378:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_I2C2_Init+0x58>)
 800137a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_I2C2_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_I2C2_Init+0x50>)
 800138a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800138e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_I2C2_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <MX_I2C2_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_I2C2_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <MX_I2C2_Init+0x50>)
 80013aa:	f001 fe47 	bl	800303c <HAL_I2C_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013b4:	f000 fd1a 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000090 	.word	0x20000090
 80013c0:	40005800 	.word	0x40005800
 80013c4:	00061a80 	.word	0x00061a80

080013c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <MX_TIM1_Init+0x98>)
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <MX_TIM1_Init+0x9c>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <MX_TIM1_Init+0x98>)
 80013ec:	2247      	movs	r2, #71	@ 0x47
 80013ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <MX_TIM1_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_TIM1_Init+0x98>)
 80013f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <MX_TIM1_Init+0x98>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_TIM1_Init+0x98>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <MX_TIM1_Init+0x98>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001410:	4813      	ldr	r0, [pc, #76]	@ (8001460 <MX_TIM1_Init+0x98>)
 8001412:	f002 ffd9 	bl	80043c8 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800141c:	f000 fce6 	bl	8001dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <MX_TIM1_Init+0x98>)
 800142e:	f003 f865 	bl	80044fc <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001438:	f000 fcd8 	bl	8001dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_TIM1_Init+0x98>)
 800144a:	f003 fa23 	bl	8004894 <HAL_TIMEx_MasterConfigSynchronization>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001454:	f000 fcca 	bl	8001dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200000e4 	.word	0x200000e4
 8001464:	40012c00 	.word	0x40012c00

08001468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147c:	4b38      	ldr	r3, [pc, #224]	@ (8001560 <MX_GPIO_Init+0xf8>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a37      	ldr	r2, [pc, #220]	@ (8001560 <MX_GPIO_Init+0xf8>)
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b35      	ldr	r3, [pc, #212]	@ (8001560 <MX_GPIO_Init+0xf8>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b32      	ldr	r3, [pc, #200]	@ (8001560 <MX_GPIO_Init+0xf8>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a31      	ldr	r2, [pc, #196]	@ (8001560 <MX_GPIO_Init+0xf8>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001560 <MX_GPIO_Init+0xf8>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001560 <MX_GPIO_Init+0xf8>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001560 <MX_GPIO_Init+0xf8>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <MX_GPIO_Init+0xf8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 4112 	mov.w	r1, #37376	@ 0x9200
 80014ca:	4826      	ldr	r0, [pc, #152]	@ (8001564 <MX_GPIO_Init+0xfc>)
 80014cc:	f001 fd85 	bl	8002fda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2138      	movs	r1, #56	@ 0x38
 80014d4:	4824      	ldr	r0, [pc, #144]	@ (8001568 <MX_GPIO_Init+0x100>)
 80014d6:	f001 fd80 	bl	8002fda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	4619      	mov	r1, r3
 80014ee:	481d      	ldr	r0, [pc, #116]	@ (8001564 <MX_GPIO_Init+0xfc>)
 80014f0:	f001 fbd8 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_15;
 80014f4:	f44f 4312 	mov.w	r3, #37376	@ 0x9200
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2302      	movs	r3, #2
 8001504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	4815      	ldr	r0, [pc, #84]	@ (8001564 <MX_GPIO_Init+0xfc>)
 800150e:	f001 fbc9 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001512:	2338      	movs	r3, #56	@ 0x38
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4619      	mov	r1, r3
 8001528:	480f      	ldr	r0, [pc, #60]	@ (8001568 <MX_GPIO_Init+0x100>)
 800152a:	f001 fbbb 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800152e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <MX_GPIO_Init+0x104>)
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	4809      	ldr	r0, [pc, #36]	@ (8001568 <MX_GPIO_Init+0x100>)
 8001544:	f001 fbae 	bl	8002ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	2017      	movs	r0, #23
 800154e:	f001 fb72 	bl	8002c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001552:	2017      	movs	r0, #23
 8001554:	f001 fb8b 	bl	8002c6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	40010800 	.word	0x40010800
 8001568:	40010c00 	.word	0x40010c00
 800156c:	10110000 	.word	0x10110000

08001570 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 800157a:	f001 fa57 	bl	8002a2c <HAL_GetTick>
 800157e:	4603      	mov	r3, r0
 8001580:	4ab0      	ldr	r2, [pc, #704]	@ (8001844 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001582:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8001584:	4baf      	ldr	r3, [pc, #700]	@ (8001844 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4baf      	ldr	r3, [pc, #700]	@ (8001848 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b0a      	cmp	r3, #10
 8001590:	f240 81c0 	bls.w	8001914 <HAL_GPIO_EXTI_Callback+0x3a4>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001594:	4bad      	ldr	r3, [pc, #692]	@ (800184c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001596:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 800159a:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800159c:	4bab      	ldr	r3, [pc, #684]	@ (800184c <HAL_GPIO_EXTI_Callback+0x2dc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80015a2:	4baa      	ldr	r3, [pc, #680]	@ (800184c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	4ba8      	ldr	r3, [pc, #672]	@ (800184c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80015aa:	2202      	movs	r2, #2
 80015ac:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 80015ae:	49a7      	ldr	r1, [pc, #668]	@ (800184c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80015b0:	48a7      	ldr	r0, [pc, #668]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015b2:	f001 fb77 	bl	8002ca4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015bc:	48a5      	ldr	r0, [pc, #660]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80015be:	f001 fd0c 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2108      	movs	r1, #8
 80015c6:	48a2      	ldr	r0, [pc, #648]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015c8:	f001 fd07 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2110      	movs	r1, #16
 80015d0:	489f      	ldr	r0, [pc, #636]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015d2:	f001 fd02 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2120      	movs	r1, #32
 80015da:	489d      	ldr	r0, [pc, #628]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015dc:	f001 fcfd 	bl	8002fda <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	2b40      	cmp	r3, #64	@ 0x40
 80015e4:	d10e      	bne.n	8001604 <HAL_GPIO_EXTI_Callback+0x94>
 80015e6:	2140      	movs	r1, #64	@ 0x40
 80015e8:	4899      	ldr	r0, [pc, #612]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015ea:	f001 fcdf 	bl	8002fac <HAL_GPIO_ReadPin>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_EXTI_Callback+0x94>
    {
      keyPressed = 68; //ASCII value of D
 80015f4:	4b98      	ldr	r3, [pc, #608]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80015f6:	2244      	movs	r2, #68	@ 0x44
 80015f8:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 80015fa:	f000 ffed 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 80015fe:	f000 fcbf 	bl	8001f80 <SSD1306_UpdateScreen>
 8001602:	e038      	b.n	8001676 <HAL_GPIO_EXTI_Callback+0x106>

    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	2b80      	cmp	r3, #128	@ 0x80
 8001608:	d10e      	bne.n	8001628 <HAL_GPIO_EXTI_Callback+0xb8>
 800160a:	2180      	movs	r1, #128	@ 0x80
 800160c:	4890      	ldr	r0, [pc, #576]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800160e:	f001 fccd 	bl	8002fac <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_EXTI_Callback+0xb8>
    {
      keyPressed = 67; //ASCII value of C
 8001618:	4b8f      	ldr	r3, [pc, #572]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800161a:	2243      	movs	r2, #67	@ 0x43
 800161c:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 800161e:	f000 ffdb 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 8001622:	f000 fcad 	bl	8001f80 <SSD1306_UpdateScreen>
 8001626:	e026      	b.n	8001676 <HAL_GPIO_EXTI_Callback+0x106>

    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800162e:	d10f      	bne.n	8001650 <HAL_GPIO_EXTI_Callback+0xe0>
 8001630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001634:	4886      	ldr	r0, [pc, #536]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001636:	f001 fcb9 	bl	8002fac <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_EXTI_Callback+0xe0>
    {
      keyPressed = 66; //ASCII value of B
 8001640:	4b85      	ldr	r3, [pc, #532]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001642:	2242      	movs	r2, #66	@ 0x42
 8001644:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 8001646:	f000 ffc7 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 800164a:	f000 fc99 	bl	8001f80 <SSD1306_UpdateScreen>
 800164e:	e012      	b.n	8001676 <HAL_GPIO_EXTI_Callback+0x106>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001656:	d10e      	bne.n	8001676 <HAL_GPIO_EXTI_Callback+0x106>
 8001658:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800165c:	487c      	ldr	r0, [pc, #496]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800165e:	f001 fca5 	bl	8002fac <HAL_GPIO_ReadPin>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_EXTI_Callback+0x106>
    {
      keyPressed = 65; //ASCII value of A
 8001668:	4b7b      	ldr	r3, [pc, #492]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800166a:	2241      	movs	r2, #65	@ 0x41
 800166c:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 800166e:	f000 ffb3 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 8001672:	f000 fc85 	bl	8001f80 <SSD1306_UpdateScreen>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800167c:	4875      	ldr	r0, [pc, #468]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800167e:	f001 fcac 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001682:	2201      	movs	r2, #1
 8001684:	2108      	movs	r1, #8
 8001686:	4872      	ldr	r0, [pc, #456]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001688:	f001 fca7 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2110      	movs	r1, #16
 8001690:	486f      	ldr	r0, [pc, #444]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001692:	f001 fca2 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2120      	movs	r1, #32
 800169a:	486d      	ldr	r0, [pc, #436]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800169c:	f001 fc9d 	bl	8002fda <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	2b40      	cmp	r3, #64	@ 0x40
 80016a4:	d10e      	bne.n	80016c4 <HAL_GPIO_EXTI_Callback+0x154>
 80016a6:	2140      	movs	r1, #64	@ 0x40
 80016a8:	4869      	ldr	r0, [pc, #420]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016aa:	f001 fc7f 	bl	8002fac <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_EXTI_Callback+0x154>
    {
      keyPressed = 35; //ASCII value of #
 80016b4:	4b68      	ldr	r3, [pc, #416]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80016b6:	2223      	movs	r2, #35	@ 0x23
 80016b8:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 80016ba:	f000 ff8d 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 80016be:	f000 fc5f 	bl	8001f80 <SSD1306_UpdateScreen>
 80016c2:	e038      	b.n	8001736 <HAL_GPIO_EXTI_Callback+0x1c6>

    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	2b80      	cmp	r3, #128	@ 0x80
 80016c8:	d10e      	bne.n	80016e8 <HAL_GPIO_EXTI_Callback+0x178>
 80016ca:	2180      	movs	r1, #128	@ 0x80
 80016cc:	4860      	ldr	r0, [pc, #384]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016ce:	f001 fc6d 	bl	8002fac <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_EXTI_Callback+0x178>
    {
      keyPressed = 57; //ASCII value of 9
 80016d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80016da:	2239      	movs	r2, #57	@ 0x39
 80016dc:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 80016de:	f000 ff7b 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 80016e2:	f000 fc4d 	bl	8001f80 <SSD1306_UpdateScreen>
 80016e6:	e026      	b.n	8001736 <HAL_GPIO_EXTI_Callback+0x1c6>

    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ee:	d10f      	bne.n	8001710 <HAL_GPIO_EXTI_Callback+0x1a0>
 80016f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f4:	4856      	ldr	r0, [pc, #344]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016f6:	f001 fc59 	bl	8002fac <HAL_GPIO_ReadPin>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_EXTI_Callback+0x1a0>
    {
      keyPressed = 54; //ASCII value of 6
 8001700:	4b55      	ldr	r3, [pc, #340]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001702:	2236      	movs	r2, #54	@ 0x36
 8001704:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 8001706:	f000 ff67 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 800170a:	f000 fc39 	bl	8001f80 <SSD1306_UpdateScreen>
 800170e:	e012      	b.n	8001736 <HAL_GPIO_EXTI_Callback+0x1c6>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001716:	d10e      	bne.n	8001736 <HAL_GPIO_EXTI_Callback+0x1c6>
 8001718:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800171c:	484c      	ldr	r0, [pc, #304]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800171e:	f001 fc45 	bl	8002fac <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_EXTI_Callback+0x1c6>
    {
      keyPressed = 51; //ASCII value of 3
 8001728:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800172a:	2233      	movs	r2, #51	@ 0x33
 800172c:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 800172e:	f000 ff53 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 8001732:	f000 fc25 	bl	8001f80 <SSD1306_UpdateScreen>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800173c:	4845      	ldr	r0, [pc, #276]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800173e:	f001 fc4c 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2108      	movs	r1, #8
 8001746:	4842      	ldr	r0, [pc, #264]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001748:	f001 fc47 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800174c:	2201      	movs	r2, #1
 800174e:	2110      	movs	r1, #16
 8001750:	483f      	ldr	r0, [pc, #252]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001752:	f001 fc42 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2120      	movs	r1, #32
 800175a:	483d      	ldr	r0, [pc, #244]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800175c:	f001 fc3d 	bl	8002fda <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	2b40      	cmp	r3, #64	@ 0x40
 8001764:	d10e      	bne.n	8001784 <HAL_GPIO_EXTI_Callback+0x214>
 8001766:	2140      	movs	r1, #64	@ 0x40
 8001768:	4839      	ldr	r0, [pc, #228]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800176a:	f001 fc1f 	bl	8002fac <HAL_GPIO_ReadPin>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_GPIO_EXTI_Callback+0x214>
    {
      keyPressed = 48; //ASCII value of 0
 8001774:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001776:	2230      	movs	r2, #48	@ 0x30
 8001778:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 800177a:	f000 ff2d 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 800177e:	f000 fbff 	bl	8001f80 <SSD1306_UpdateScreen>
 8001782:	e038      	b.n	80017f6 <HAL_GPIO_EXTI_Callback+0x286>

    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	2b80      	cmp	r3, #128	@ 0x80
 8001788:	d10e      	bne.n	80017a8 <HAL_GPIO_EXTI_Callback+0x238>
 800178a:	2180      	movs	r1, #128	@ 0x80
 800178c:	4830      	ldr	r0, [pc, #192]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800178e:	f001 fc0d 	bl	8002fac <HAL_GPIO_ReadPin>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_EXTI_Callback+0x238>
    {
      keyPressed = 56; //ASCII value of 8
 8001798:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800179a:	2238      	movs	r2, #56	@ 0x38
 800179c:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 800179e:	f000 ff1b 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 80017a2:	f000 fbed 	bl	8001f80 <SSD1306_UpdateScreen>
 80017a6:	e026      	b.n	80017f6 <HAL_GPIO_EXTI_Callback+0x286>

    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ae:	d10f      	bne.n	80017d0 <HAL_GPIO_EXTI_Callback+0x260>
 80017b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b4:	4826      	ldr	r0, [pc, #152]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80017b6:	f001 fbf9 	bl	8002fac <HAL_GPIO_ReadPin>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_GPIO_EXTI_Callback+0x260>
    {
      keyPressed = 53; //ASCII value of 5
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80017c2:	2235      	movs	r2, #53	@ 0x35
 80017c4:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 80017c6:	f000 ff07 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 80017ca:	f000 fbd9 	bl	8001f80 <SSD1306_UpdateScreen>
 80017ce:	e012      	b.n	80017f6 <HAL_GPIO_EXTI_Callback+0x286>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017d6:	d10e      	bne.n	80017f6 <HAL_GPIO_EXTI_Callback+0x286>
 80017d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017dc:	481c      	ldr	r0, [pc, #112]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80017de:	f001 fbe5 	bl	8002fac <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_EXTI_Callback+0x286>
    {
      keyPressed = 50; //ASCII value of 2
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 80017ea:	2232      	movs	r2, #50	@ 0x32
 80017ec:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 80017ee:	f000 fef3 	bl	80025d8 <SSD1306_Clear>
      SSD1306_UpdateScreen();
 80017f2:	f000 fbc5 	bl	8001f80 <SSD1306_UpdateScreen>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017fc:	4815      	ldr	r0, [pc, #84]	@ (8001854 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80017fe:	f001 fbec 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2108      	movs	r1, #8
 8001806:	4812      	ldr	r0, [pc, #72]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001808:	f001 fbe7 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2110      	movs	r1, #16
 8001810:	480f      	ldr	r0, [pc, #60]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001812:	f001 fbe2 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001816:	2201      	movs	r2, #1
 8001818:	2120      	movs	r1, #32
 800181a:	480d      	ldr	r0, [pc, #52]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800181c:	f001 fbdd 	bl	8002fda <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	2b40      	cmp	r3, #64	@ 0x40
 8001824:	d11a      	bne.n	800185c <HAL_GPIO_EXTI_Callback+0x2ec>
 8001826:	2140      	movs	r1, #64	@ 0x40
 8001828:	4809      	ldr	r0, [pc, #36]	@ (8001850 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800182a:	f001 fbbf 	bl	8002fac <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d013      	beq.n	800185c <HAL_GPIO_EXTI_Callback+0x2ec>
    {
      keyPressed = 42; //ASCII value of *
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001836:	222a      	movs	r2, #42	@ 0x2a
 8001838:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 800183a:	f000 fecd 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 800183e:	f000 fb9f 	bl	8001f80 <SSD1306_UpdateScreen>
 8001842:	e044      	b.n	80018ce <HAL_GPIO_EXTI_Callback+0x35e>
 8001844:	20000140 	.word	0x20000140
 8001848:	2000013c 	.word	0x2000013c
 800184c:	2000012c 	.word	0x2000012c
 8001850:	40010c00 	.word	0x40010c00
 8001854:	40010800 	.word	0x40010800
 8001858:	20000144 	.word	0x20000144

    }
    else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	2b80      	cmp	r3, #128	@ 0x80
 8001860:	d10e      	bne.n	8001880 <HAL_GPIO_EXTI_Callback+0x310>
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	482d      	ldr	r0, [pc, #180]	@ (800191c <HAL_GPIO_EXTI_Callback+0x3ac>)
 8001866:	f001 fba1 	bl	8002fac <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_EXTI_Callback+0x310>
    {
      keyPressed = 55; //ASCII value of 7
 8001870:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <HAL_GPIO_EXTI_Callback+0x3b0>)
 8001872:	2237      	movs	r2, #55	@ 0x37
 8001874:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 8001876:	f000 feaf 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 800187a:	f000 fb81 	bl	8001f80 <SSD1306_UpdateScreen>
 800187e:	e026      	b.n	80018ce <HAL_GPIO_EXTI_Callback+0x35e>

    }
    else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001886:	d10f      	bne.n	80018a8 <HAL_GPIO_EXTI_Callback+0x338>
 8001888:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800188c:	4823      	ldr	r0, [pc, #140]	@ (800191c <HAL_GPIO_EXTI_Callback+0x3ac>)
 800188e:	f001 fb8d 	bl	8002fac <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <HAL_GPIO_EXTI_Callback+0x338>
    {
      keyPressed = 52; //ASCII value of 4
 8001898:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <HAL_GPIO_EXTI_Callback+0x3b0>)
 800189a:	2234      	movs	r2, #52	@ 0x34
 800189c:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 800189e:	f000 fe9b 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 80018a2:	f000 fb6d 	bl	8001f80 <SSD1306_UpdateScreen>
 80018a6:	e012      	b.n	80018ce <HAL_GPIO_EXTI_Callback+0x35e>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ae:	d10e      	bne.n	80018ce <HAL_GPIO_EXTI_Callback+0x35e>
 80018b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b4:	4819      	ldr	r0, [pc, #100]	@ (800191c <HAL_GPIO_EXTI_Callback+0x3ac>)
 80018b6:	f001 fb79 	bl	8002fac <HAL_GPIO_ReadPin>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_GPIO_EXTI_Callback+0x35e>
    {
      keyPressed = 49; //ASCII value of 1
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <HAL_GPIO_EXTI_Callback+0x3b0>)
 80018c2:	2231      	movs	r2, #49	@ 0x31
 80018c4:	701a      	strb	r2, [r3, #0]
//      oledPrintChar(keyPressed);
      SSD1306_Clear();
 80018c6:	f000 fe87 	bl	80025d8 <SSD1306_Clear>
  	SSD1306_UpdateScreen();
 80018ca:	f000 fb59 	bl	8001f80 <SSD1306_UpdateScreen>

    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018d4:	4813      	ldr	r0, [pc, #76]	@ (8001924 <HAL_GPIO_EXTI_Callback+0x3b4>)
 80018d6:	f001 fb80 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80018da:	2201      	movs	r2, #1
 80018dc:	2108      	movs	r1, #8
 80018de:	480f      	ldr	r0, [pc, #60]	@ (800191c <HAL_GPIO_EXTI_Callback+0x3ac>)
 80018e0:	f001 fb7b 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2110      	movs	r1, #16
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <HAL_GPIO_EXTI_Callback+0x3ac>)
 80018ea:	f001 fb76 	bl	8002fda <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2120      	movs	r1, #32
 80018f2:	480a      	ldr	r0, [pc, #40]	@ (800191c <HAL_GPIO_EXTI_Callback+0x3ac>)
 80018f4:	f001 fb71 	bl	8002fda <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80018fa:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <HAL_GPIO_EXTI_Callback+0x3bc>)
 80018fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001900:	2202      	movs	r2, #2
 8001902:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8001904:	4908      	ldr	r1, [pc, #32]	@ (8001928 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001906:	4805      	ldr	r0, [pc, #20]	@ (800191c <HAL_GPIO_EXTI_Callback+0x3ac>)
 8001908:	f001 f9cc 	bl	8002ca4 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x3c0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a08      	ldr	r2, [pc, #32]	@ (8001934 <HAL_GPIO_EXTI_Callback+0x3c4>)
 8001912:	6013      	str	r3, [r2, #0]
  }
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40010c00 	.word	0x40010c00
 8001920:	20000144 	.word	0x20000144
 8001924:	40010800 	.word	0x40010800
 8001928:	2000012c 	.word	0x2000012c
 800192c:	10110000 	.word	0x10110000
 8001930:	20000140 	.word	0x20000140
 8001934:	2000013c 	.word	0x2000013c

08001938 <DashboardScreen>:
	SSD1306_GotoXY (0,0);
	SSD1306_Puts (character, &Font_16x26, 1);
	SSD1306_UpdateScreen();
}

void DashboardScreen(){
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b083      	sub	sp, #12
 800193c:	af02      	add	r7, sp, #8
	currentMillis = HAL_GetTick();
 800193e:	f001 f875 	bl	8002a2c <HAL_GetTick>
 8001942:	4603      	mov	r3, r0
 8001944:	4a89      	ldr	r2, [pc, #548]	@ (8001b6c <DashboardScreen+0x234>)
 8001946:	6013      	str	r3, [r2, #0]
//	SSD1306_Clear();

	if(DHT11_Start())
 8001948:	f7ff fad6 	bl	8000ef8 <DHT11_Start>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80ce 	beq.w	8001af0 <DashboardScreen+0x1b8>
	    {
	      RHI = DHT11_Read(); // Relative humidity integral
 8001954:	f7ff fb46 	bl	8000fe4 <DHT11_Read>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b84      	ldr	r3, [pc, #528]	@ (8001b70 <DashboardScreen+0x238>)
 800195e:	701a      	strb	r2, [r3, #0]
	      RHD = DHT11_Read(); // Relative humidity decimal
 8001960:	f7ff fb40 	bl	8000fe4 <DHT11_Read>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b82      	ldr	r3, [pc, #520]	@ (8001b74 <DashboardScreen+0x23c>)
 800196a:	701a      	strb	r2, [r3, #0]
	      TCI = DHT11_Read(); // Celsius integral
 800196c:	f7ff fb3a 	bl	8000fe4 <DHT11_Read>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b80      	ldr	r3, [pc, #512]	@ (8001b78 <DashboardScreen+0x240>)
 8001976:	701a      	strb	r2, [r3, #0]
	      TCD = DHT11_Read(); // Celsius decimal
 8001978:	f7ff fb34 	bl	8000fe4 <DHT11_Read>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	4b7e      	ldr	r3, [pc, #504]	@ (8001b7c <DashboardScreen+0x244>)
 8001982:	701a      	strb	r2, [r3, #0]
	      SUM = DHT11_Read(); // Check sum
 8001984:	f7ff fb2e 	bl	8000fe4 <DHT11_Read>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b80 <DashboardScreen+0x248>)
 800198e:	701a      	strb	r2, [r3, #0]
	      if (RHI + RHD + TCI + TCD == SUM)
 8001990:	4b77      	ldr	r3, [pc, #476]	@ (8001b70 <DashboardScreen+0x238>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b77      	ldr	r3, [pc, #476]	@ (8001b74 <DashboardScreen+0x23c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a76      	ldr	r2, [pc, #472]	@ (8001b78 <DashboardScreen+0x240>)
 800199e:	7812      	ldrb	r2, [r2, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a76      	ldr	r2, [pc, #472]	@ (8001b7c <DashboardScreen+0x244>)
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a75      	ldr	r2, [pc, #468]	@ (8001b80 <DashboardScreen+0x248>)
 80019aa:	7812      	ldrb	r2, [r2, #0]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	f040 809f 	bne.w	8001af0 <DashboardScreen+0x1b8>
	      {
	        // Can use RHI and TCI for any purposes if whole number only needed
	        tCelsius = (float)TCI + (float)(TCD/10.0);
 80019b2:	4b71      	ldr	r3, [pc, #452]	@ (8001b78 <DashboardScreen+0x240>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f8be 	bl	8000b38 <__aeabi_ui2f>
 80019bc:	4604      	mov	r4, r0
 80019be:	4b6f      	ldr	r3, [pc, #444]	@ (8001b7c <DashboardScreen+0x244>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fd16 	bl	80003f4 <__aeabi_i2d>
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b6d      	ldr	r3, [pc, #436]	@ (8001b84 <DashboardScreen+0x24c>)
 80019ce:	f7fe fea5 	bl	800071c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7fe ffa7 	bl	800092c <__aeabi_d2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4620      	mov	r0, r4
 80019e4:	f7fe fff8 	bl	80009d8 <__addsf3>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b66      	ldr	r3, [pc, #408]	@ (8001b88 <DashboardScreen+0x250>)
 80019ee:	601a      	str	r2, [r3, #0]
	        tFahrenheit = tCelsius * 9/5 + 32;
 80019f0:	4b65      	ldr	r3, [pc, #404]	@ (8001b88 <DashboardScreen+0x250>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4965      	ldr	r1, [pc, #404]	@ (8001b8c <DashboardScreen+0x254>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f8f6 	bl	8000be8 <__aeabi_fmul>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4964      	ldr	r1, [pc, #400]	@ (8001b90 <DashboardScreen+0x258>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f9a5 	bl	8000d50 <__aeabi_fdiv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe ffe3 	bl	80009d8 <__addsf3>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b5f      	ldr	r3, [pc, #380]	@ (8001b94 <DashboardScreen+0x25c>)
 8001a18:	601a      	str	r2, [r3, #0]
	        RH = (float)RHI + (float)(RHD/10.0);
 8001a1a:	4b55      	ldr	r3, [pc, #340]	@ (8001b70 <DashboardScreen+0x238>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f88a 	bl	8000b38 <__aeabi_ui2f>
 8001a24:	4604      	mov	r4, r0
 8001a26:	4b53      	ldr	r3, [pc, #332]	@ (8001b74 <DashboardScreen+0x23c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fce2 	bl	80003f4 <__aeabi_i2d>
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b53      	ldr	r3, [pc, #332]	@ (8001b84 <DashboardScreen+0x24c>)
 8001a36:	f7fe fe71 	bl	800071c <__aeabi_ddiv>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f7fe ff73 	bl	800092c <__aeabi_d2f>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7fe ffc4 	bl	80009d8 <__addsf3>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <DashboardScreen+0x260>)
 8001a56:	601a      	str	r2, [r3, #0]
	        // Can use tCelsius, tFahrenheit and RH for any purposes
	        TFI = tFahrenheit;  // Fahrenheit integral
 8001a58:	4b4e      	ldr	r3, [pc, #312]	@ (8001b94 <DashboardScreen+0x25c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fa13 	bl	8000e88 <__aeabi_f2uiz>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <DashboardScreen+0x264>)
 8001a68:	701a      	strb	r2, [r3, #0]
	        TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b94 <DashboardScreen+0x25c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	494c      	ldr	r1, [pc, #304]	@ (8001ba0 <DashboardScreen+0x268>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f8b9 	bl	8000be8 <__aeabi_fmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461c      	mov	r4, r3
 8001a7a:	4b48      	ldr	r3, [pc, #288]	@ (8001b9c <DashboardScreen+0x264>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f859 	bl	8000b40 <__aeabi_i2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4619      	mov	r1, r3
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7fe ff9e 	bl	80009d4 <__aeabi_fsub>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f9f4 	bl	8000e88 <__aeabi_f2uiz>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <DashboardScreen+0x26c>)
 8001aa6:	701a      	strb	r2, [r3, #0]
	        sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 8001aa8:	4b33      	ldr	r3, [pc, #204]	@ (8001b78 <DashboardScreen+0x240>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <DashboardScreen+0x244>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	493d      	ldr	r1, [pc, #244]	@ (8001ba8 <DashboardScreen+0x270>)
 8001ab4:	483d      	ldr	r0, [pc, #244]	@ (8001bac <DashboardScreen+0x274>)
 8001ab6:	f002 ffa7 	bl	8004a08 <siprintf>
	        SSD1306_GotoXY (29, 0);
 8001aba:	2100      	movs	r1, #0
 8001abc:	201d      	movs	r0, #29
 8001abe:	f000 fb03 	bl	80020c8 <SSD1306_GotoXY>
	        SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	493a      	ldr	r1, [pc, #232]	@ (8001bb0 <DashboardScreen+0x278>)
 8001ac6:	4839      	ldr	r0, [pc, #228]	@ (8001bac <DashboardScreen+0x274>)
 8001ac8:	f000 fb92 	bl	80021f0 <SSD1306_Puts>
//	        sprintf(strCopy,"%d.%d F   ", TFI, TFD);
//	        SSD1306_GotoXY (0, 20);
//	        SSD1306_Puts (strCopy, &Font_11x18, 1);
	        sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 8001acc:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <DashboardScreen+0x238>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <DashboardScreen+0x23c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4937      	ldr	r1, [pc, #220]	@ (8001bb4 <DashboardScreen+0x27c>)
 8001ad8:	4834      	ldr	r0, [pc, #208]	@ (8001bac <DashboardScreen+0x274>)
 8001ada:	f002 ff95 	bl	8004a08 <siprintf>
	        SSD1306_GotoXY (29, 20);
 8001ade:	2114      	movs	r1, #20
 8001ae0:	201d      	movs	r0, #29
 8001ae2:	f000 faf1 	bl	80020c8 <SSD1306_GotoXY>
	        SSD1306_Puts (strCopy, &Font_11x18, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4931      	ldr	r1, [pc, #196]	@ (8001bb0 <DashboardScreen+0x278>)
 8001aea:	4830      	ldr	r0, [pc, #192]	@ (8001bac <DashboardScreen+0x274>)
 8001aec:	f000 fb80 	bl	80021f0 <SSD1306_Puts>
//	SSD1306_GotoXY (29,0);
//	SSD1306_Puts ("20.5 C", &Font_11x18, 1);
//	SSD1306_GotoXY (29, 20);
//	SSD1306_Puts ("50.9 %", &Font_11x18, 1);

	SSD1306_DrawLine(0, 45, SSD1306_WIDTH - 1, 45, 1);
 8001af0:	2301      	movs	r3, #1
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	232d      	movs	r3, #45	@ 0x2d
 8001af6:	227f      	movs	r2, #127	@ 0x7f
 8001af8:	212d      	movs	r1, #45	@ 0x2d
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 fb9d 	bl	800223a <SSD1306_DrawLine>

	SSD1306_GotoXY (6, 52);
 8001b00:	2134      	movs	r1, #52	@ 0x34
 8001b02:	2006      	movs	r0, #6
 8001b04:	f000 fae0 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("A", &Font_7x10, 1);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	492b      	ldr	r1, [pc, #172]	@ (8001bb8 <DashboardScreen+0x280>)
 8001b0c:	482b      	ldr	r0, [pc, #172]	@ (8001bbc <DashboardScreen+0x284>)
 8001b0e:	f000 fb6f 	bl	80021f0 <SSD1306_Puts>
	SSD1306_DrawCircle(9, 56, 7, 1);
 8001b12:	2301      	movs	r3, #1
 8001b14:	2207      	movs	r2, #7
 8001b16:	2138      	movs	r1, #56	@ 0x38
 8001b18:	2009      	movs	r0, #9
 8001b1a:	f000 fc89 	bl	8002430 <SSD1306_DrawCircle>
	SSD1306_GotoXY (20, 52);
 8001b1e:	2134      	movs	r1, #52	@ 0x34
 8001b20:	2014      	movs	r0, #20
 8001b22:	f000 fad1 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("MENU", &Font_7x10, 1);
 8001b26:	2201      	movs	r2, #1
 8001b28:	4923      	ldr	r1, [pc, #140]	@ (8001bb8 <DashboardScreen+0x280>)
 8001b2a:	4825      	ldr	r0, [pc, #148]	@ (8001bc0 <DashboardScreen+0x288>)
 8001b2c:	f000 fb60 	bl	80021f0 <SSD1306_Puts>

	SSD1306_GotoXY (113, 52);
 8001b30:	2134      	movs	r1, #52	@ 0x34
 8001b32:	2071      	movs	r0, #113	@ 0x71
 8001b34:	f000 fac8 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("ON", &Font_7x10, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	491f      	ldr	r1, [pc, #124]	@ (8001bb8 <DashboardScreen+0x280>)
 8001b3c:	4821      	ldr	r0, [pc, #132]	@ (8001bc4 <DashboardScreen+0x28c>)
 8001b3e:	f000 fb57 	bl	80021f0 <SSD1306_Puts>
//			SSD1306_Clear();
//			keyPressed =0;
//		}
//		menu();
//	}
	if(keyPressed == 65 && currentMillis - previousMillis >= 100){
 8001b42:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <DashboardScreen+0x290>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b41      	cmp	r3, #65	@ 0x41
 8001b48:	d10c      	bne.n	8001b64 <DashboardScreen+0x22c>
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <DashboardScreen+0x234>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <DashboardScreen+0x294>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b63      	cmp	r3, #99	@ 0x63
 8001b56:	d905      	bls.n	8001b64 <DashboardScreen+0x22c>
//		SSD1306_Clear();
		menu();
 8001b58:	f000 f83a 	bl	8001bd0 <menu>
		previousMillis = currentMillis;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <DashboardScreen+0x234>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a1a      	ldr	r2, [pc, #104]	@ (8001bcc <DashboardScreen+0x294>)
 8001b62:	6013      	str	r3, [r2, #0]
	}
//	  HAL_Delay(3000);
//	  SSD1306_Clear();
}
 8001b64:	bf00      	nop
 8001b66:	3704      	adds	r7, #4
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	20000140 	.word	0x20000140
 8001b70:	20000152 	.word	0x20000152
 8001b74:	20000153 	.word	0x20000153
 8001b78:	20000154 	.word	0x20000154
 8001b7c:	20000155 	.word	0x20000155
 8001b80:	20000156 	.word	0x20000156
 8001b84:	40240000 	.word	0x40240000
 8001b88:	20000160 	.word	0x20000160
 8001b8c:	41100000 	.word	0x41100000
 8001b90:	40a00000 	.word	0x40a00000
 8001b94:	20000164 	.word	0x20000164
 8001b98:	20000168 	.word	0x20000168
 8001b9c:	2000016c 	.word	0x2000016c
 8001ba0:	41200000 	.word	0x41200000
 8001ba4:	2000016d 	.word	0x2000016d
 8001ba8:	080053a0 	.word	0x080053a0
 8001bac:	20000170 	.word	0x20000170
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	080053ac 	.word	0x080053ac
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	080053b8 	.word	0x080053b8
 8001bc0:	080053bc 	.word	0x080053bc
 8001bc4:	080053c4 	.word	0x080053c4
 8001bc8:	20000144 	.word	0x20000144
 8001bcc:	2000013c 	.word	0x2000013c

08001bd0 <menu>:

void menu(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
//	SSD1306_Clear();
	while(keyPressed == 65){
 8001bd4:	e081      	b.n	8001cda <menu+0x10a>
		SSD1306_GotoXY (6, 3);
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	2006      	movs	r0, #6
 8001bda:	f000 fa75 	bl	80020c8 <SSD1306_GotoXY>
		SSD1306_Puts ("A", &Font_7x10, 1);
 8001bde:	2201      	movs	r2, #1
 8001be0:	4942      	ldr	r1, [pc, #264]	@ (8001cec <menu+0x11c>)
 8001be2:	4843      	ldr	r0, [pc, #268]	@ (8001cf0 <menu+0x120>)
 8001be4:	f000 fb04 	bl	80021f0 <SSD1306_Puts>
		SSD1306_DrawCircle(9, 7, 7, 1);
 8001be8:	2301      	movs	r3, #1
 8001bea:	2207      	movs	r2, #7
 8001bec:	2107      	movs	r1, #7
 8001bee:	2009      	movs	r0, #9
 8001bf0:	f000 fc1e 	bl	8002430 <SSD1306_DrawCircle>
		SSD1306_GotoXY (20, 3);
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	2014      	movs	r0, #20
 8001bf8:	f000 fa66 	bl	80020c8 <SSD1306_GotoXY>
		SSD1306_Puts ("ENV DATA", &Font_7x10, 1);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	493b      	ldr	r1, [pc, #236]	@ (8001cec <menu+0x11c>)
 8001c00:	483c      	ldr	r0, [pc, #240]	@ (8001cf4 <menu+0x124>)
 8001c02:	f000 faf5 	bl	80021f0 <SSD1306_Puts>

		SSD1306_GotoXY (6, 19);
 8001c06:	2113      	movs	r1, #19
 8001c08:	2006      	movs	r0, #6
 8001c0a:	f000 fa5d 	bl	80020c8 <SSD1306_GotoXY>
		SSD1306_Puts ("B", &Font_7x10, 1);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4936      	ldr	r1, [pc, #216]	@ (8001cec <menu+0x11c>)
 8001c12:	4839      	ldr	r0, [pc, #228]	@ (8001cf8 <menu+0x128>)
 8001c14:	f000 faec 	bl	80021f0 <SSD1306_Puts>
		SSD1306_DrawCircle(9, 23, 7, 1);
 8001c18:	2301      	movs	r3, #1
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	2117      	movs	r1, #23
 8001c1e:	2009      	movs	r0, #9
 8001c20:	f000 fc06 	bl	8002430 <SSD1306_DrawCircle>
		SSD1306_GotoXY (20, 19);
 8001c24:	2113      	movs	r1, #19
 8001c26:	2014      	movs	r0, #20
 8001c28:	f000 fa4e 	bl	80020c8 <SSD1306_GotoXY>
		SSD1306_Puts ("PROXIMITY", &Font_7x10, 1);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	492f      	ldr	r1, [pc, #188]	@ (8001cec <menu+0x11c>)
 8001c30:	4832      	ldr	r0, [pc, #200]	@ (8001cfc <menu+0x12c>)
 8001c32:	f000 fadd 	bl	80021f0 <SSD1306_Puts>

		SSD1306_GotoXY (6, 35);
 8001c36:	2123      	movs	r1, #35	@ 0x23
 8001c38:	2006      	movs	r0, #6
 8001c3a:	f000 fa45 	bl	80020c8 <SSD1306_GotoXY>
		SSD1306_Puts ("C", &Font_7x10, 1);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	492a      	ldr	r1, [pc, #168]	@ (8001cec <menu+0x11c>)
 8001c42:	482f      	ldr	r0, [pc, #188]	@ (8001d00 <menu+0x130>)
 8001c44:	f000 fad4 	bl	80021f0 <SSD1306_Puts>
		SSD1306_DrawCircle(9, 39, 7, 1);
 8001c48:	2301      	movs	r3, #1
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	2127      	movs	r1, #39	@ 0x27
 8001c4e:	2009      	movs	r0, #9
 8001c50:	f000 fbee 	bl	8002430 <SSD1306_DrawCircle>
		SSD1306_GotoXY (20, 35);
 8001c54:	2123      	movs	r1, #35	@ 0x23
 8001c56:	2014      	movs	r0, #20
 8001c58:	f000 fa36 	bl	80020c8 <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_7x10, 1);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4923      	ldr	r1, [pc, #140]	@ (8001cec <menu+0x11c>)
 8001c60:	4828      	ldr	r0, [pc, #160]	@ (8001d04 <menu+0x134>)
 8001c62:	f000 fac5 	bl	80021f0 <SSD1306_Puts>

		SSD1306_GotoXY (6, 51);
 8001c66:	2133      	movs	r1, #51	@ 0x33
 8001c68:	2006      	movs	r0, #6
 8001c6a:	f000 fa2d 	bl	80020c8 <SSD1306_GotoXY>
		SSD1306_Puts ("D", &Font_7x10, 1);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	491e      	ldr	r1, [pc, #120]	@ (8001cec <menu+0x11c>)
 8001c72:	4825      	ldr	r0, [pc, #148]	@ (8001d08 <menu+0x138>)
 8001c74:	f000 fabc 	bl	80021f0 <SSD1306_Puts>
		SSD1306_DrawCircle(9, 55, 7, 1);
 8001c78:	2301      	movs	r3, #1
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	2137      	movs	r1, #55	@ 0x37
 8001c7e:	2009      	movs	r0, #9
 8001c80:	f000 fbd6 	bl	8002430 <SSD1306_DrawCircle>
		SSD1306_GotoXY (20, 51);
 8001c84:	2133      	movs	r1, #51	@ 0x33
 8001c86:	2014      	movs	r0, #20
 8001c88:	f000 fa1e 	bl	80020c8 <SSD1306_GotoXY>
		SSD1306_Puts ("BACK", &Font_7x10, 1);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4917      	ldr	r1, [pc, #92]	@ (8001cec <menu+0x11c>)
 8001c90:	481e      	ldr	r0, [pc, #120]	@ (8001d0c <menu+0x13c>)
 8001c92:	f000 faad 	bl	80021f0 <SSD1306_Puts>

//		SSD1306_UpdateScreen();

		if(keyPressed == 65 && currentMillis - previousMillis >= 100){
 8001c96:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <menu+0x140>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b41      	cmp	r3, #65	@ 0x41
 8001c9c:	d10c      	bne.n	8001cb8 <menu+0xe8>
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <menu+0x144>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <menu+0x148>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b63      	cmp	r3, #99	@ 0x63
 8001caa:	d905      	bls.n	8001cb8 <menu+0xe8>
//			SSD1306_Clear();
			EnvDataScreen();
 8001cac:	f000 f836 	bl	8001d1c <EnvDataScreen>
			previousMillis = currentMillis;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <menu+0x144>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <menu+0x148>)
 8001cb6:	6013      	str	r3, [r2, #0]
		}

		if(keyPressed == 68 && currentMillis - previousMillis >= 100){
 8001cb8:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <menu+0x140>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b44      	cmp	r3, #68	@ 0x44
 8001cbe:	d10c      	bne.n	8001cda <menu+0x10a>
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <menu+0x144>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <menu+0x148>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b63      	cmp	r3, #99	@ 0x63
 8001ccc:	d905      	bls.n	8001cda <menu+0x10a>
//			SSD1306_Clear();
			DashboardScreen();
 8001cce:	f7ff fe33 	bl	8001938 <DashboardScreen>
			previousMillis = currentMillis;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <menu+0x144>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <menu+0x148>)
 8001cd8:	6013      	str	r3, [r2, #0]
	while(keyPressed == 65){
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <menu+0x140>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b41      	cmp	r3, #65	@ 0x41
 8001ce0:	f43f af79 	beq.w	8001bd6 <menu+0x6>
		}
	}
//	while(keyPressed == 68){
//		menu();
//	}
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	080053b8 	.word	0x080053b8
 8001cf4:	080053c8 	.word	0x080053c8
 8001cf8:	080053d4 	.word	0x080053d4
 8001cfc:	080053d8 	.word	0x080053d8
 8001d00:	080053e4 	.word	0x080053e4
 8001d04:	080053e8 	.word	0x080053e8
 8001d08:	080053f4 	.word	0x080053f4
 8001d0c:	080053f8 	.word	0x080053f8
 8001d10:	20000144 	.word	0x20000144
 8001d14:	20000140 	.word	0x20000140
 8001d18:	2000013c 	.word	0x2000013c

08001d1c <EnvDataScreen>:

void EnvDataScreen(){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (6, 3);
 8001d20:	2103      	movs	r1, #3
 8001d22:	2006      	movs	r0, #6
 8001d24:	f000 f9d0 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("A", &Font_7x10, 1);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4928      	ldr	r1, [pc, #160]	@ (8001dcc <EnvDataScreen+0xb0>)
 8001d2c:	4828      	ldr	r0, [pc, #160]	@ (8001dd0 <EnvDataScreen+0xb4>)
 8001d2e:	f000 fa5f 	bl	80021f0 <SSD1306_Puts>
	SSD1306_DrawCircle(9, 7, 7, 1);
 8001d32:	2301      	movs	r3, #1
 8001d34:	2207      	movs	r2, #7
 8001d36:	2107      	movs	r1, #7
 8001d38:	2009      	movs	r0, #9
 8001d3a:	f000 fb79 	bl	8002430 <SSD1306_DrawCircle>
	SSD1306_GotoXY (20, 3);
 8001d3e:	2103      	movs	r1, #3
 8001d40:	2014      	movs	r0, #20
 8001d42:	f000 f9c1 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("TEMPERATURE", &Font_7x10, 1);
 8001d46:	2201      	movs	r2, #1
 8001d48:	4920      	ldr	r1, [pc, #128]	@ (8001dcc <EnvDataScreen+0xb0>)
 8001d4a:	4822      	ldr	r0, [pc, #136]	@ (8001dd4 <EnvDataScreen+0xb8>)
 8001d4c:	f000 fa50 	bl	80021f0 <SSD1306_Puts>

	SSD1306_GotoXY (6, 19);
 8001d50:	2113      	movs	r1, #19
 8001d52:	2006      	movs	r0, #6
 8001d54:	f000 f9b8 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("B", &Font_7x10, 1);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	491c      	ldr	r1, [pc, #112]	@ (8001dcc <EnvDataScreen+0xb0>)
 8001d5c:	481e      	ldr	r0, [pc, #120]	@ (8001dd8 <EnvDataScreen+0xbc>)
 8001d5e:	f000 fa47 	bl	80021f0 <SSD1306_Puts>
	SSD1306_DrawCircle(9, 23, 7, 1);
 8001d62:	2301      	movs	r3, #1
 8001d64:	2207      	movs	r2, #7
 8001d66:	2117      	movs	r1, #23
 8001d68:	2009      	movs	r0, #9
 8001d6a:	f000 fb61 	bl	8002430 <SSD1306_DrawCircle>
	SSD1306_GotoXY (20, 19);
 8001d6e:	2113      	movs	r1, #19
 8001d70:	2014      	movs	r0, #20
 8001d72:	f000 f9a9 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("HUMIDITY", &Font_7x10, 1);
 8001d76:	2201      	movs	r2, #1
 8001d78:	4914      	ldr	r1, [pc, #80]	@ (8001dcc <EnvDataScreen+0xb0>)
 8001d7a:	4818      	ldr	r0, [pc, #96]	@ (8001ddc <EnvDataScreen+0xc0>)
 8001d7c:	f000 fa38 	bl	80021f0 <SSD1306_Puts>

	SSD1306_GotoXY (6, 51);
 8001d80:	2133      	movs	r1, #51	@ 0x33
 8001d82:	2006      	movs	r0, #6
 8001d84:	f000 f9a0 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("D", &Font_7x10, 1);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4910      	ldr	r1, [pc, #64]	@ (8001dcc <EnvDataScreen+0xb0>)
 8001d8c:	4814      	ldr	r0, [pc, #80]	@ (8001de0 <EnvDataScreen+0xc4>)
 8001d8e:	f000 fa2f 	bl	80021f0 <SSD1306_Puts>
	SSD1306_DrawCircle(9, 55, 7, 1);
 8001d92:	2301      	movs	r3, #1
 8001d94:	2207      	movs	r2, #7
 8001d96:	2137      	movs	r1, #55	@ 0x37
 8001d98:	2009      	movs	r0, #9
 8001d9a:	f000 fb49 	bl	8002430 <SSD1306_DrawCircle>
	SSD1306_GotoXY (20, 51);
 8001d9e:	2133      	movs	r1, #51	@ 0x33
 8001da0:	2014      	movs	r0, #20
 8001da2:	f000 f991 	bl	80020c8 <SSD1306_GotoXY>
	SSD1306_Puts ("BACK", &Font_7x10, 1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <EnvDataScreen+0xb0>)
 8001daa:	480e      	ldr	r0, [pc, #56]	@ (8001de4 <EnvDataScreen+0xc8>)
 8001dac:	f000 fa20 	bl	80021f0 <SSD1306_Puts>

//	SSD1306_UpdateScreen();

	if(keyPressed == 65){ // A
 8001db0:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <EnvDataScreen+0xcc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b41      	cmp	r3, #65	@ 0x41
 8001db6:	d101      	bne.n	8001dbc <EnvDataScreen+0xa0>
//		SSD1306_Clear();
		EnvDataScreen();
 8001db8:	f7ff ffb0 	bl	8001d1c <EnvDataScreen>
	}

	if(keyPressed == 68){ // D
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <EnvDataScreen+0xcc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b44      	cmp	r3, #68	@ 0x44
 8001dc2:	d101      	bne.n	8001dc8 <EnvDataScreen+0xac>
//		SSD1306_Clear();
		menu();
 8001dc4:	f7ff ff04 	bl	8001bd0 <menu>
//			keyPressed =0;
	}
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	080053b8 	.word	0x080053b8
 8001dd4:	08005400 	.word	0x08005400
 8001dd8:	080053d4 	.word	0x080053d4
 8001ddc:	0800540c 	.word	0x0800540c
 8001de0:	080053f4 	.word	0x080053f4
 8001de4:	080053f8 	.word	0x080053f8
 8001de8:	20000144 	.word	0x20000144

08001dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
}
 8001df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <Error_Handler+0x8>

08001df8 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001dfe:	f000 fbf5 	bl	80025ec <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001e02:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001e06:	2201      	movs	r2, #1
 8001e08:	2178      	movs	r1, #120	@ 0x78
 8001e0a:	485b      	ldr	r0, [pc, #364]	@ (8001f78 <SSD1306_Init+0x180>)
 8001e0c:	f001 fb58 	bl	80034c0 <HAL_I2C_IsDeviceReady>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e0a9      	b.n	8001f6e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001e1a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001e1e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e20:	e002      	b.n	8001e28 <SSD1306_Init+0x30>
		p--;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f9      	bne.n	8001e22 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001e2e:	22ae      	movs	r2, #174	@ 0xae
 8001e30:	2100      	movs	r1, #0
 8001e32:	2078      	movs	r0, #120	@ 0x78
 8001e34:	f000 fc54 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001e38:	2220      	movs	r2, #32
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2078      	movs	r0, #120	@ 0x78
 8001e3e:	f000 fc4f 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e42:	2210      	movs	r2, #16
 8001e44:	2100      	movs	r1, #0
 8001e46:	2078      	movs	r0, #120	@ 0x78
 8001e48:	f000 fc4a 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e4c:	22b0      	movs	r2, #176	@ 0xb0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2078      	movs	r0, #120	@ 0x78
 8001e52:	f000 fc45 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001e56:	22c8      	movs	r2, #200	@ 0xc8
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2078      	movs	r0, #120	@ 0x78
 8001e5c:	f000 fc40 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2078      	movs	r0, #120	@ 0x78
 8001e66:	f000 fc3b 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2078      	movs	r0, #120	@ 0x78
 8001e70:	f000 fc36 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001e74:	2240      	movs	r2, #64	@ 0x40
 8001e76:	2100      	movs	r1, #0
 8001e78:	2078      	movs	r0, #120	@ 0x78
 8001e7a:	f000 fc31 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001e7e:	2281      	movs	r2, #129	@ 0x81
 8001e80:	2100      	movs	r1, #0
 8001e82:	2078      	movs	r0, #120	@ 0x78
 8001e84:	f000 fc2c 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001e88:	22ff      	movs	r2, #255	@ 0xff
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2078      	movs	r0, #120	@ 0x78
 8001e8e:	f000 fc27 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001e92:	22a1      	movs	r2, #161	@ 0xa1
 8001e94:	2100      	movs	r1, #0
 8001e96:	2078      	movs	r0, #120	@ 0x78
 8001e98:	f000 fc22 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001e9c:	22a6      	movs	r2, #166	@ 0xa6
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2078      	movs	r0, #120	@ 0x78
 8001ea2:	f000 fc1d 	bl	80026e0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ea6:	22a8      	movs	r2, #168	@ 0xa8
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2078      	movs	r0, #120	@ 0x78
 8001eac:	f000 fc18 	bl	80026e0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8001eb0:	223f      	movs	r2, #63	@ 0x3f
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2078      	movs	r0, #120	@ 0x78
 8001eb6:	f000 fc13 	bl	80026e0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001eba:	22a4      	movs	r2, #164	@ 0xa4
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2078      	movs	r0, #120	@ 0x78
 8001ec0:	f000 fc0e 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001ec4:	22d3      	movs	r2, #211	@ 0xd3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2078      	movs	r0, #120	@ 0x78
 8001eca:	f000 fc09 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2078      	movs	r0, #120	@ 0x78
 8001ed4:	f000 fc04 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ed8:	22d5      	movs	r2, #213	@ 0xd5
 8001eda:	2100      	movs	r1, #0
 8001edc:	2078      	movs	r0, #120	@ 0x78
 8001ede:	f000 fbff 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ee2:	22f0      	movs	r2, #240	@ 0xf0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2078      	movs	r0, #120	@ 0x78
 8001ee8:	f000 fbfa 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001eec:	22d9      	movs	r2, #217	@ 0xd9
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2078      	movs	r0, #120	@ 0x78
 8001ef2:	f000 fbf5 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001ef6:	2222      	movs	r2, #34	@ 0x22
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2078      	movs	r0, #120	@ 0x78
 8001efc:	f000 fbf0 	bl	80026e0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001f00:	22da      	movs	r2, #218	@ 0xda
 8001f02:	2100      	movs	r1, #0
 8001f04:	2078      	movs	r0, #120	@ 0x78
 8001f06:	f000 fbeb 	bl	80026e0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8001f0a:	2212      	movs	r2, #18
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2078      	movs	r0, #120	@ 0x78
 8001f10:	f000 fbe6 	bl	80026e0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001f14:	22db      	movs	r2, #219	@ 0xdb
 8001f16:	2100      	movs	r1, #0
 8001f18:	2078      	movs	r0, #120	@ 0x78
 8001f1a:	f000 fbe1 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001f1e:	2220      	movs	r2, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	2078      	movs	r0, #120	@ 0x78
 8001f24:	f000 fbdc 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001f28:	228d      	movs	r2, #141	@ 0x8d
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2078      	movs	r0, #120	@ 0x78
 8001f2e:	f000 fbd7 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001f32:	2214      	movs	r2, #20
 8001f34:	2100      	movs	r1, #0
 8001f36:	2078      	movs	r0, #120	@ 0x78
 8001f38:	f000 fbd2 	bl	80026e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001f3c:	22af      	movs	r2, #175	@ 0xaf
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2078      	movs	r0, #120	@ 0x78
 8001f42:	f000 fbcd 	bl	80026e0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001f46:	222e      	movs	r2, #46	@ 0x2e
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2078      	movs	r0, #120	@ 0x78
 8001f4c:	f000 fbc8 	bl	80026e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f000 f843 	bl	8001fdc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001f56:	f000 f813 	bl	8001f80 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <SSD1306_Init+0x184>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f60:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <SSD1306_Init+0x184>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001f66:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <SSD1306_Init+0x184>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001f6c:	2301      	movs	r3, #1
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000090 	.word	0x20000090
 8001f7c:	20000580 	.word	0x20000580

08001f80 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001f86:	2300      	movs	r3, #0
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	e01d      	b.n	8001fc8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	3b50      	subs	r3, #80	@ 0x50
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	2100      	movs	r1, #0
 8001f96:	2078      	movs	r0, #120	@ 0x78
 8001f98:	f000 fba2 	bl	80026e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2078      	movs	r0, #120	@ 0x78
 8001fa2:	f000 fb9d 	bl	80026e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2078      	movs	r0, #120	@ 0x78
 8001fac:	f000 fb98 	bl	80026e0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	4a08      	ldr	r2, [pc, #32]	@ (8001fd8 <SSD1306_UpdateScreen+0x58>)
 8001fb6:	441a      	add	r2, r3
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	2140      	movs	r1, #64	@ 0x40
 8001fbc:	2078      	movs	r0, #120	@ 0x78
 8001fbe:	f000 fb29 	bl	8002614 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	71fb      	strb	r3, [r7, #7]
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b07      	cmp	r3, #7
 8001fcc:	d9de      	bls.n	8001f8c <SSD1306_UpdateScreen+0xc>
	}
}
 8001fce:	bf00      	nop
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000180 	.word	0x20000180

08001fdc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <SSD1306_Fill+0x14>
 8001fec:	2300      	movs	r3, #0
 8001fee:	e000      	b.n	8001ff2 <SSD1306_Fill+0x16>
 8001ff0:	23ff      	movs	r3, #255	@ 0xff
 8001ff2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4803      	ldr	r0, [pc, #12]	@ (8002008 <SSD1306_Fill+0x2c>)
 8001ffa:	f002 fd25 	bl	8004a48 <memset>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000180 	.word	0x20000180

0800200c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
 8002016:	460b      	mov	r3, r1
 8002018:	80bb      	strh	r3, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	70fb      	strb	r3, [r7, #3]
	if (
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	2b7f      	cmp	r3, #127	@ 0x7f
 8002022:	d848      	bhi.n	80020b6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002024:	88bb      	ldrh	r3, [r7, #4]
 8002026:	2b3f      	cmp	r3, #63	@ 0x3f
 8002028:	d845      	bhi.n	80020b6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800202a:	4b25      	ldr	r3, [pc, #148]	@ (80020c0 <SSD1306_DrawPixel+0xb4>)
 800202c:	791b      	ldrb	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d006      	beq.n	8002040 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d11a      	bne.n	800207c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	88bb      	ldrh	r3, [r7, #4]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	b298      	uxth	r0, r3
 800204e:	4603      	mov	r3, r0
 8002050:	01db      	lsls	r3, r3, #7
 8002052:	4413      	add	r3, r2
 8002054:	4a1b      	ldr	r2, [pc, #108]	@ (80020c4 <SSD1306_DrawPixel+0xb8>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	b25a      	sxtb	r2, r3
 800205a:	88bb      	ldrh	r3, [r7, #4]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	b25b      	sxtb	r3, r3
 8002068:	4313      	orrs	r3, r2
 800206a:	b259      	sxtb	r1, r3
 800206c:	88fa      	ldrh	r2, [r7, #6]
 800206e:	4603      	mov	r3, r0
 8002070:	01db      	lsls	r3, r3, #7
 8002072:	4413      	add	r3, r2
 8002074:	b2c9      	uxtb	r1, r1
 8002076:	4a13      	ldr	r2, [pc, #76]	@ (80020c4 <SSD1306_DrawPixel+0xb8>)
 8002078:	54d1      	strb	r1, [r2, r3]
 800207a:	e01d      	b.n	80020b8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	88bb      	ldrh	r3, [r7, #4]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	b298      	uxth	r0, r3
 8002084:	4603      	mov	r3, r0
 8002086:	01db      	lsls	r3, r3, #7
 8002088:	4413      	add	r3, r2
 800208a:	4a0e      	ldr	r2, [pc, #56]	@ (80020c4 <SSD1306_DrawPixel+0xb8>)
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	b25a      	sxtb	r2, r3
 8002090:	88bb      	ldrh	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	b25b      	sxtb	r3, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	4013      	ands	r3, r2
 80020a4:	b259      	sxtb	r1, r3
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	4603      	mov	r3, r0
 80020aa:	01db      	lsls	r3, r3, #7
 80020ac:	4413      	add	r3, r2
 80020ae:	b2c9      	uxtb	r1, r1
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <SSD1306_DrawPixel+0xb8>)
 80020b2:	54d1      	strb	r1, [r2, r3]
 80020b4:	e000      	b.n	80020b8 <SSD1306_DrawPixel+0xac>
		return;
 80020b6:	bf00      	nop
	}
}
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000580 	.word	0x20000580
 80020c4:	20000180 	.word	0x20000180

080020c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	460a      	mov	r2, r1
 80020d2:	80fb      	strh	r3, [r7, #6]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80020d8:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <SSD1306_GotoXY+0x28>)
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80020de:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <SSD1306_GotoXY+0x28>)
 80020e0:	88bb      	ldrh	r3, [r7, #4]
 80020e2:	8053      	strh	r3, [r2, #2]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000580 	.word	0x20000580

080020f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	4613      	mov	r3, r2
 8002102:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002104:	4b39      	ldr	r3, [pc, #228]	@ (80021ec <SSD1306_Putc+0xf8>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
	if (
 8002110:	2b7f      	cmp	r3, #127	@ 0x7f
 8002112:	dc07      	bgt.n	8002124 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002114:	4b35      	ldr	r3, [pc, #212]	@ (80021ec <SSD1306_Putc+0xf8>)
 8002116:	885b      	ldrh	r3, [r3, #2]
 8002118:	461a      	mov	r2, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002120:	2b3f      	cmp	r3, #63	@ 0x3f
 8002122:	dd01      	ble.n	8002128 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002124:	2300      	movs	r3, #0
 8002126:	e05d      	b.n	80021e4 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e04b      	b.n	80021c6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	3b20      	subs	r3, #32
 8002136:	6839      	ldr	r1, [r7, #0]
 8002138:	7849      	ldrb	r1, [r1, #1]
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4619      	mov	r1, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	440b      	add	r3, r1
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e030      	b.n	80021b4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d010      	beq.n	8002184 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002162:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <SSD1306_Putc+0xf8>)
 8002164:	881a      	ldrh	r2, [r3, #0]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	b29b      	uxth	r3, r3
 800216a:	4413      	add	r3, r2
 800216c:	b298      	uxth	r0, r3
 800216e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ec <SSD1306_Putc+0xf8>)
 8002170:	885a      	ldrh	r2, [r3, #2]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	b29b      	uxth	r3, r3
 8002176:	4413      	add	r3, r2
 8002178:	b29b      	uxth	r3, r3
 800217a:	79ba      	ldrb	r2, [r7, #6]
 800217c:	4619      	mov	r1, r3
 800217e:	f7ff ff45 	bl	800200c <SSD1306_DrawPixel>
 8002182:	e014      	b.n	80021ae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <SSD1306_Putc+0xf8>)
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b298      	uxth	r0, r3
 8002190:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <SSD1306_Putc+0xf8>)
 8002192:	885a      	ldrh	r2, [r3, #2]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	b29b      	uxth	r3, r3
 8002198:	4413      	add	r3, r2
 800219a:	b299      	uxth	r1, r3
 800219c:	79bb      	ldrb	r3, [r7, #6]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7ff ff2f 	bl	800200c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	3301      	adds	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4293      	cmp	r3, r2
 80021be:	d3c8      	bcc.n	8002152 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3301      	adds	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	461a      	mov	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d3ad      	bcc.n	800212e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <SSD1306_Putc+0xf8>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <SSD1306_Putc+0xf8>)
 80021e0:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80021e2:	79fb      	ldrb	r3, [r7, #7]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000580 	.word	0x20000580

080021f0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80021fe:	e012      	b.n	8002226 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	79fa      	ldrb	r2, [r7, #7]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff73 	bl	80020f4 <SSD1306_Putc>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d002      	beq.n	8002220 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	e008      	b.n	8002232 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3301      	adds	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e8      	bne.n	8002200 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	781b      	ldrb	r3, [r3, #0]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b087      	sub	sp, #28
 800223e:	af00      	add	r7, sp, #0
 8002240:	4604      	mov	r4, r0
 8002242:	4608      	mov	r0, r1
 8002244:	4611      	mov	r1, r2
 8002246:	461a      	mov	r2, r3
 8002248:	4623      	mov	r3, r4
 800224a:	80fb      	strh	r3, [r7, #6]
 800224c:	4603      	mov	r3, r0
 800224e:	80bb      	strh	r3, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	2b7f      	cmp	r3, #127	@ 0x7f
 800225c:	d901      	bls.n	8002262 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800225e:	237f      	movs	r3, #127	@ 0x7f
 8002260:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	2b7f      	cmp	r3, #127	@ 0x7f
 8002266:	d901      	bls.n	800226c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002268:	237f      	movs	r3, #127	@ 0x7f
 800226a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800226c:	88bb      	ldrh	r3, [r7, #4]
 800226e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002270:	d901      	bls.n	8002276 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002272:	233f      	movs	r3, #63	@ 0x3f
 8002274:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002276:	883b      	ldrh	r3, [r7, #0]
 8002278:	2b3f      	cmp	r3, #63	@ 0x3f
 800227a:	d901      	bls.n	8002280 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800227c:	233f      	movs	r3, #63	@ 0x3f
 800227e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	429a      	cmp	r2, r3
 8002286:	d205      	bcs.n	8002294 <SSD1306_DrawLine+0x5a>
 8002288:	887a      	ldrh	r2, [r7, #2]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	b21b      	sxth	r3, r3
 8002292:	e004      	b.n	800229e <SSD1306_DrawLine+0x64>
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b29b      	uxth	r3, r3
 800229c:	b21b      	sxth	r3, r3
 800229e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80022a0:	88ba      	ldrh	r2, [r7, #4]
 80022a2:	883b      	ldrh	r3, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d205      	bcs.n	80022b4 <SSD1306_DrawLine+0x7a>
 80022a8:	883a      	ldrh	r2, [r7, #0]
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	e004      	b.n	80022be <SSD1306_DrawLine+0x84>
 80022b4:	88ba      	ldrh	r2, [r7, #4]
 80022b6:	883b      	ldrh	r3, [r7, #0]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b21b      	sxth	r3, r3
 80022be:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80022c0:	88fa      	ldrh	r2, [r7, #6]
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d201      	bcs.n	80022cc <SSD1306_DrawLine+0x92>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e001      	b.n	80022d0 <SSD1306_DrawLine+0x96>
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80022d2:	88ba      	ldrh	r2, [r7, #4]
 80022d4:	883b      	ldrh	r3, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d201      	bcs.n	80022de <SSD1306_DrawLine+0xa4>
 80022da:	2301      	movs	r3, #1
 80022dc:	e001      	b.n	80022e2 <SSD1306_DrawLine+0xa8>
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80022e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dd06      	ble.n	80022fe <SSD1306_DrawLine+0xc4>
 80022f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022f4:	0fda      	lsrs	r2, r3, #31
 80022f6:	4413      	add	r3, r2
 80022f8:	105b      	asrs	r3, r3, #1
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	e006      	b.n	800230c <SSD1306_DrawLine+0xd2>
 80022fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002302:	0fda      	lsrs	r2, r3, #31
 8002304:	4413      	add	r3, r2
 8002306:	105b      	asrs	r3, r3, #1
 8002308:	425b      	negs	r3, r3
 800230a:	b21b      	sxth	r3, r3
 800230c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800230e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d129      	bne.n	800236a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002316:	883a      	ldrh	r2, [r7, #0]
 8002318:	88bb      	ldrh	r3, [r7, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	d205      	bcs.n	800232a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800231e:	883b      	ldrh	r3, [r7, #0]
 8002320:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002322:	88bb      	ldrh	r3, [r7, #4]
 8002324:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002326:	893b      	ldrh	r3, [r7, #8]
 8002328:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	429a      	cmp	r2, r3
 8002330:	d205      	bcs.n	800233e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800233a:	893b      	ldrh	r3, [r7, #8]
 800233c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	82bb      	strh	r3, [r7, #20]
 8002342:	e00c      	b.n	800235e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002344:	8ab9      	ldrh	r1, [r7, #20]
 8002346:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fe5d 	bl	800200c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002352:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002356:	b29b      	uxth	r3, r3
 8002358:	3301      	adds	r3, #1
 800235a:	b29b      	uxth	r3, r3
 800235c:	82bb      	strh	r3, [r7, #20]
 800235e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002362:	883b      	ldrh	r3, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	dded      	ble.n	8002344 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8002368:	e05f      	b.n	800242a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800236a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d129      	bne.n	80023c6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002372:	883a      	ldrh	r2, [r7, #0]
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d205      	bcs.n	8002386 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800237a:	883b      	ldrh	r3, [r7, #0]
 800237c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800237e:	88bb      	ldrh	r3, [r7, #4]
 8002380:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002382:	893b      	ldrh	r3, [r7, #8]
 8002384:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	429a      	cmp	r2, r3
 800238c:	d205      	bcs.n	800239a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002396:	893b      	ldrh	r3, [r7, #8]
 8002398:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	82bb      	strh	r3, [r7, #20]
 800239e:	e00c      	b.n	80023ba <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80023a0:	8abb      	ldrh	r3, [r7, #20]
 80023a2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80023a6:	88b9      	ldrh	r1, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fe2f 	bl	800200c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80023ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	82bb      	strh	r3, [r7, #20]
 80023ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	dded      	ble.n	80023a0 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80023c4:	e031      	b.n	800242a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80023c6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80023ca:	88b9      	ldrh	r1, [r7, #4]
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fe1c 	bl	800200c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d103      	bne.n	80023e4 <SSD1306_DrawLine+0x1aa>
 80023dc:	88ba      	ldrh	r2, [r7, #4]
 80023de:	883b      	ldrh	r3, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d021      	beq.n	8002428 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80023e4:	8afb      	ldrh	r3, [r7, #22]
 80023e6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80023e8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80023ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023f0:	425b      	negs	r3, r3
 80023f2:	429a      	cmp	r2, r3
 80023f4:	dd08      	ble.n	8002408 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80023f6:	8afa      	ldrh	r2, [r7, #22]
 80023f8:	8a3b      	ldrh	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002400:	89fa      	ldrh	r2, [r7, #14]
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	4413      	add	r3, r2
 8002406:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002408:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800240c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	dad8      	bge.n	80023c6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002414:	8afa      	ldrh	r2, [r7, #22]
 8002416:	8a7b      	ldrh	r3, [r7, #18]
 8002418:	4413      	add	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800241e:	89ba      	ldrh	r2, [r7, #12]
 8002420:	88bb      	ldrh	r3, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002426:	e7ce      	b.n	80023c6 <SSD1306_DrawLine+0x18c>
			break;
 8002428:	bf00      	nop
		} 
	}
}
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd90      	pop	{r4, r7, pc}

08002430 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	4604      	mov	r4, r0
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4623      	mov	r3, r4
 8002440:	80fb      	strh	r3, [r7, #6]
 8002442:	4603      	mov	r3, r0
 8002444:	80bb      	strh	r3, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	807b      	strh	r3, [r7, #2]
 800244a:	4613      	mov	r3, r2
 800244c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	f1c3 0301 	rsb	r3, r3, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002458:	2301      	movs	r3, #1
 800245a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	461a      	mov	r2, r3
 8002460:	03d2      	lsls	r2, r2, #15
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002472:	88f8      	ldrh	r0, [r7, #6]
 8002474:	88ba      	ldrh	r2, [r7, #4]
 8002476:	887b      	ldrh	r3, [r7, #2]
 8002478:	4413      	add	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	787a      	ldrb	r2, [r7, #1]
 800247e:	4619      	mov	r1, r3
 8002480:	f7ff fdc4 	bl	800200c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002484:	88f8      	ldrh	r0, [r7, #6]
 8002486:	88ba      	ldrh	r2, [r7, #4]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	b29b      	uxth	r3, r3
 800248e:	787a      	ldrb	r2, [r7, #1]
 8002490:	4619      	mov	r1, r3
 8002492:	f7ff fdbb 	bl	800200c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	4413      	add	r3, r2
 800249c:	b29b      	uxth	r3, r3
 800249e:	88b9      	ldrh	r1, [r7, #4]
 80024a0:	787a      	ldrb	r2, [r7, #1]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fdb2 	bl	800200c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80024a8:	88fa      	ldrh	r2, [r7, #6]
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	88b9      	ldrh	r1, [r7, #4]
 80024b2:	787a      	ldrb	r2, [r7, #1]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fda9 	bl	800200c <SSD1306_DrawPixel>

    while (x < y) {
 80024ba:	e081      	b.n	80025c0 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 80024bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0e      	blt.n	80024e2 <SSD1306_DrawCircle+0xb2>
            y--;
 80024c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80024d0:	8a7b      	ldrh	r3, [r7, #18]
 80024d2:	3302      	adds	r3, #2
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80024d8:	8afa      	ldrh	r2, [r7, #22]
 80024da:	8a7b      	ldrh	r3, [r7, #18]
 80024dc:	4413      	add	r3, r2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80024e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80024ee:	8abb      	ldrh	r3, [r7, #20]
 80024f0:	3302      	adds	r3, #2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80024f6:	8afa      	ldrh	r2, [r7, #22]
 80024f8:	8abb      	ldrh	r3, [r7, #20]
 80024fa:	4413      	add	r3, r2
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	8a3b      	ldrh	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	b298      	uxth	r0, r3
 8002508:	88ba      	ldrh	r2, [r7, #4]
 800250a:	89fb      	ldrh	r3, [r7, #14]
 800250c:	4413      	add	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	787a      	ldrb	r2, [r7, #1]
 8002512:	4619      	mov	r1, r3
 8002514:	f7ff fd7a 	bl	800200c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002518:	88fa      	ldrh	r2, [r7, #6]
 800251a:	8a3b      	ldrh	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b298      	uxth	r0, r3
 8002520:	88ba      	ldrh	r2, [r7, #4]
 8002522:	89fb      	ldrh	r3, [r7, #14]
 8002524:	4413      	add	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	787a      	ldrb	r2, [r7, #1]
 800252a:	4619      	mov	r1, r3
 800252c:	f7ff fd6e 	bl	800200c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002530:	88fa      	ldrh	r2, [r7, #6]
 8002532:	8a3b      	ldrh	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	b298      	uxth	r0, r3
 8002538:	88ba      	ldrh	r2, [r7, #4]
 800253a:	89fb      	ldrh	r3, [r7, #14]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	b29b      	uxth	r3, r3
 8002540:	787a      	ldrb	r2, [r7, #1]
 8002542:	4619      	mov	r1, r3
 8002544:	f7ff fd62 	bl	800200c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	8a3b      	ldrh	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	b298      	uxth	r0, r3
 8002550:	88ba      	ldrh	r2, [r7, #4]
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	b29b      	uxth	r3, r3
 8002558:	787a      	ldrb	r2, [r7, #1]
 800255a:	4619      	mov	r1, r3
 800255c:	f7ff fd56 	bl	800200c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	4413      	add	r3, r2
 8002566:	b298      	uxth	r0, r3
 8002568:	88ba      	ldrh	r2, [r7, #4]
 800256a:	8a3b      	ldrh	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	b29b      	uxth	r3, r3
 8002570:	787a      	ldrb	r2, [r7, #1]
 8002572:	4619      	mov	r1, r3
 8002574:	f7ff fd4a 	bl	800200c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	b298      	uxth	r0, r3
 8002580:	88ba      	ldrh	r2, [r7, #4]
 8002582:	8a3b      	ldrh	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	b29b      	uxth	r3, r3
 8002588:	787a      	ldrb	r2, [r7, #1]
 800258a:	4619      	mov	r1, r3
 800258c:	f7ff fd3e 	bl	800200c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	89fb      	ldrh	r3, [r7, #14]
 8002594:	4413      	add	r3, r2
 8002596:	b298      	uxth	r0, r3
 8002598:	88ba      	ldrh	r2, [r7, #4]
 800259a:	8a3b      	ldrh	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	b29b      	uxth	r3, r3
 80025a0:	787a      	ldrb	r2, [r7, #1]
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7ff fd32 	bl	800200c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 80025a8:	88fa      	ldrh	r2, [r7, #6]
 80025aa:	89fb      	ldrh	r3, [r7, #14]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	b298      	uxth	r0, r3
 80025b0:	88ba      	ldrh	r2, [r7, #4]
 80025b2:	8a3b      	ldrh	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	787a      	ldrb	r2, [r7, #1]
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7ff fd26 	bl	800200c <SSD1306_DrawPixel>
    while (x < y) {
 80025c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80025c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	f6ff af77 	blt.w	80024bc <SSD1306_DrawCircle+0x8c>
    }
}
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd90      	pop	{r4, r7, pc}

080025d8 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7ff fcfd 	bl	8001fdc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80025e2:	f7ff fccd 	bl	8001f80 <SSD1306_UpdateScreen>
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80025f2:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <ssd1306_I2C_Init+0x24>)
 80025f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025f6:	e002      	b.n	80025fe <ssd1306_I2C_Init+0x12>
		p--;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f9      	bne.n	80025f8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	0003d090 	.word	0x0003d090

08002614 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b0c7      	sub	sp, #284	@ 0x11c
 8002618:	af02      	add	r7, sp, #8
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002622:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002626:	600a      	str	r2, [r1, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800262e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002632:	4622      	mov	r2, r4
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800263a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800263e:	4602      	mov	r2, r0
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002646:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800264a:	460a      	mov	r2, r1
 800264c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800264e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002656:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800265a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800265e:	7812      	ldrb	r2, [r2, #0]
 8002660:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002662:	2300      	movs	r3, #0
 8002664:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002668:	e015      	b.n	8002696 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800266a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800266e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002672:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	441a      	add	r2, r3
 800267a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800267e:	3301      	adds	r3, #1
 8002680:	7811      	ldrb	r1, [r2, #0]
 8002682:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002686:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800268a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800268c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002690:	3301      	adds	r3, #1
 8002692:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002696:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800269a:	b29b      	uxth	r3, r3
 800269c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80026a0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80026a4:	8812      	ldrh	r2, [r2, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d8df      	bhi.n	800266a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80026aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026ae:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b299      	uxth	r1, r3
 80026b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f107 020c 	add.w	r2, r7, #12
 80026c8:	200a      	movs	r0, #10
 80026ca:	9000      	str	r0, [sp, #0]
 80026cc:	4803      	ldr	r0, [pc, #12]	@ (80026dc <ssd1306_I2C_WriteMulti+0xc8>)
 80026ce:	f000 fdf9 	bl	80032c4 <HAL_I2C_Master_Transmit>
}
 80026d2:	bf00      	nop
 80026d4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	20000090 	.word	0x20000090

080026e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
 80026ea:	460b      	mov	r3, r1
 80026ec:	71bb      	strb	r3, [r7, #6]
 80026ee:	4613      	mov	r3, r2
 80026f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80026f2:	79bb      	ldrb	r3, [r7, #6]
 80026f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80026f6:	797b      	ldrb	r3, [r7, #5]
 80026f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	b299      	uxth	r1, r3
 80026fe:	f107 020c 	add.w	r2, r7, #12
 8002702:	230a      	movs	r3, #10
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2302      	movs	r3, #2
 8002708:	4803      	ldr	r0, [pc, #12]	@ (8002718 <ssd1306_I2C_Write+0x38>)
 800270a:	f000 fddb 	bl	80032c4 <HAL_I2C_Master_Transmit>
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000090 	.word	0x20000090

0800271c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_MspInit+0x5c>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	4a14      	ldr	r2, [pc, #80]	@ (8002778 <HAL_MspInit+0x5c>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6193      	str	r3, [r2, #24]
 800272e:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_MspInit+0x5c>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <HAL_MspInit+0x5c>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a0e      	ldr	r2, [pc, #56]	@ (8002778 <HAL_MspInit+0x5c>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <HAL_MspInit+0x5c>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002752:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_MspInit+0x60>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <HAL_MspInit+0x60>)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000

08002780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a16      	ldr	r2, [pc, #88]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d124      	bne.n	80027ea <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_I2C_MspInit+0x78>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <HAL_I2C_MspInit+0x78>)
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_I2C_MspInit+0x78>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027be:	2312      	movs	r3, #18
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	f107 0310 	add.w	r3, r7, #16
 80027ca:	4619      	mov	r1, r3
 80027cc:	480b      	ldr	r0, [pc, #44]	@ (80027fc <HAL_I2C_MspInit+0x7c>)
 80027ce:	f000 fa69 	bl	8002ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027d2:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_I2C_MspInit+0x78>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a08      	ldr	r2, [pc, #32]	@ (80027f8 <HAL_I2C_MspInit+0x78>)
 80027d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_I2C_MspInit+0x78>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80027ea:	bf00      	nop
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40005800 	.word	0x40005800
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40010c00 	.word	0x40010c00

08002800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_TIM_Base_MspInit+0x34>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10b      	bne.n	800282a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_TIM_Base_MspInit+0x38>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	4a08      	ldr	r2, [pc, #32]	@ (8002838 <HAL_TIM_Base_MspInit+0x38>)
 8002818:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800281c:	6193      	str	r3, [r2, #24]
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_TIM_Base_MspInit+0x38>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40021000 	.word	0x40021000

0800283c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <NMI_Handler+0x4>

08002844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <HardFault_Handler+0x4>

0800284c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002850:	bf00      	nop
 8002852:	e7fd      	b.n	8002850 <MemManage_Handler+0x4>

08002854 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <BusFault_Handler+0x4>

0800285c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <UsageFault_Handler+0x4>

08002864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800288c:	f000 f8bc 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}

08002894 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002898:	2040      	movs	r0, #64	@ 0x40
 800289a:	f000 fbb7 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800289e:	2080      	movs	r0, #128	@ 0x80
 80028a0:	f000 fbb4 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80028a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80028a8:	f000 fbb0 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80028ac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80028b0:	f000 fbac 	bl	800300c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c0:	4a14      	ldr	r2, [pc, #80]	@ (8002914 <_sbrk+0x5c>)
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <_sbrk+0x60>)
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <_sbrk+0x64>)
 80028d6:	4a12      	ldr	r2, [pc, #72]	@ (8002920 <_sbrk+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d207      	bcs.n	80028f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e8:	f002 f8b6 	bl	8004a58 <__errno>
 80028ec:	4603      	mov	r3, r0
 80028ee:	220c      	movs	r2, #12
 80028f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e009      	b.n	800290c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f8:	4b08      	ldr	r3, [pc, #32]	@ (800291c <_sbrk+0x64>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fe:	4b07      	ldr	r3, [pc, #28]	@ (800291c <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <_sbrk+0x64>)
 8002908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20005000 	.word	0x20005000
 8002918:	00000400 	.word	0x00000400
 800291c:	20000588 	.word	0x20000588
 8002920:	200006d8 	.word	0x200006d8

08002924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002930:	f7ff fff8 	bl	8002924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002934:	480b      	ldr	r0, [pc, #44]	@ (8002964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002936:	490c      	ldr	r1, [pc, #48]	@ (8002968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002938:	4a0c      	ldr	r2, [pc, #48]	@ (800296c <LoopFillZerobss+0x16>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800293c:	e002      	b.n	8002944 <LoopCopyDataInit>

0800293e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002942:	3304      	adds	r3, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002948:	d3f9      	bcc.n	800293e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294a:	4a09      	ldr	r2, [pc, #36]	@ (8002970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800294c:	4c09      	ldr	r4, [pc, #36]	@ (8002974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002950:	e001      	b.n	8002956 <LoopFillZerobss>

08002952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002954:	3204      	adds	r2, #4

08002956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002958:	d3fb      	bcc.n	8002952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800295a:	f002 f883 	bl	8004a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800295e:	f7fe fbbf 	bl	80010e0 <main>
  bx lr
 8002962:	4770      	bx	lr
  ldr r0, =_sdata
 8002964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002968:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800296c:	08007cb8 	.word	0x08007cb8
  ldr r2, =_sbss
 8002970:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002974:	200006d8 	.word	0x200006d8

08002978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC1_2_IRQHandler>
	...

0800297c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_Init+0x28>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	@ (80029a4 <HAL_Init+0x28>)
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 f947 	bl	8002c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	200f      	movs	r0, #15
 8002994:	f000 f808 	bl	80029a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff fec0 	bl	800271c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <HAL_InitTick+0x54>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_InitTick+0x58>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f95f 	bl	8002c8a <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f000 f927 	bl	8002c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	@ (8002a04 <HAL_InitTick+0x5c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000018 	.word	0x20000018
 8002a00:	20000020 	.word	0x20000020
 8002a04:	2000001c 	.word	0x2000001c

08002a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_IncTick+0x1c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_IncTick+0x20>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a03      	ldr	r2, [pc, #12]	@ (8002a28 <HAL_IncTick+0x20>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000020 	.word	0x20000020
 8002a28:	2000058c 	.word	0x2000058c

08002a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a30:	4b02      	ldr	r3, [pc, #8]	@ (8002a3c <HAL_GetTick+0x10>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	2000058c 	.word	0x2000058c

08002a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d005      	beq.n	8002a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <HAL_Delay+0x44>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a66:	bf00      	nop
 8002a68:	f7ff ffe0 	bl	8002a2c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d8f7      	bhi.n	8002a68 <HAL_Delay+0x28>
  {
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000020 	.word	0x20000020

08002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4906      	ldr	r1, [pc, #24]	@ (8002b20 <__NVIC_EnableIRQ+0x34>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	@ (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	@ (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bec:	d301      	bcc.n	8002bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <SysTick_Config+0x40>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7ff ff90 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <SysTick_Config+0x40>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <SysTick_Config+0x40>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff2d 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff42 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff90 	bl	8002b78 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5f 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff35 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa2 	bl	8002bdc <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b08b      	sub	sp, #44	@ 0x2c
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb6:	e169      	b.n	8002f8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cb8:	2201      	movs	r2, #1
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	f040 8158 	bne.w	8002f86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a9a      	ldr	r2, [pc, #616]	@ (8002f44 <HAL_GPIO_Init+0x2a0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d05e      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002ce0:	4a98      	ldr	r2, [pc, #608]	@ (8002f44 <HAL_GPIO_Init+0x2a0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d875      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002ce6:	4a98      	ldr	r2, [pc, #608]	@ (8002f48 <HAL_GPIO_Init+0x2a4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d058      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002cec:	4a96      	ldr	r2, [pc, #600]	@ (8002f48 <HAL_GPIO_Init+0x2a4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d86f      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002cf2:	4a96      	ldr	r2, [pc, #600]	@ (8002f4c <HAL_GPIO_Init+0x2a8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d052      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002cf8:	4a94      	ldr	r2, [pc, #592]	@ (8002f4c <HAL_GPIO_Init+0x2a8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d869      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002cfe:	4a94      	ldr	r2, [pc, #592]	@ (8002f50 <HAL_GPIO_Init+0x2ac>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04c      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002d04:	4a92      	ldr	r2, [pc, #584]	@ (8002f50 <HAL_GPIO_Init+0x2ac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d863      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d0a:	4a92      	ldr	r2, [pc, #584]	@ (8002f54 <HAL_GPIO_Init+0x2b0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d046      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
 8002d10:	4a90      	ldr	r2, [pc, #576]	@ (8002f54 <HAL_GPIO_Init+0x2b0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d85d      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d82a      	bhi.n	8002d70 <HAL_GPIO_Init+0xcc>
 8002d1a:	2b12      	cmp	r3, #18
 8002d1c:	d859      	bhi.n	8002dd2 <HAL_GPIO_Init+0x12e>
 8002d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d24 <HAL_GPIO_Init+0x80>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d9f 	.word	0x08002d9f
 8002d28:	08002d79 	.word	0x08002d79
 8002d2c:	08002d8b 	.word	0x08002d8b
 8002d30:	08002dcd 	.word	0x08002dcd
 8002d34:	08002dd3 	.word	0x08002dd3
 8002d38:	08002dd3 	.word	0x08002dd3
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002dd3 	.word	0x08002dd3
 8002d44:	08002dd3 	.word	0x08002dd3
 8002d48:	08002dd3 	.word	0x08002dd3
 8002d4c:	08002dd3 	.word	0x08002dd3
 8002d50:	08002dd3 	.word	0x08002dd3
 8002d54:	08002dd3 	.word	0x08002dd3
 8002d58:	08002dd3 	.word	0x08002dd3
 8002d5c:	08002dd3 	.word	0x08002dd3
 8002d60:	08002dd3 	.word	0x08002dd3
 8002d64:	08002dd3 	.word	0x08002dd3
 8002d68:	08002d81 	.word	0x08002d81
 8002d6c:	08002d95 	.word	0x08002d95
 8002d70:	4a79      	ldr	r2, [pc, #484]	@ (8002f58 <HAL_GPIO_Init+0x2b4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d76:	e02c      	b.n	8002dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e029      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	3304      	adds	r3, #4
 8002d86:	623b      	str	r3, [r7, #32]
          break;
 8002d88:	e024      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	3308      	adds	r3, #8
 8002d90:	623b      	str	r3, [r7, #32]
          break;
 8002d92:	e01f      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	623b      	str	r3, [r7, #32]
          break;
 8002d9c:	e01a      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002da6:	2304      	movs	r3, #4
 8002da8:	623b      	str	r3, [r7, #32]
          break;
 8002daa:	e013      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db4:	2308      	movs	r3, #8
 8002db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	611a      	str	r2, [r3, #16]
          break;
 8002dbe:	e009      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	615a      	str	r2, [r3, #20]
          break;
 8002dca:	e003      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
          break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_GPIO_Init+0x130>
          break;
 8002dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2bff      	cmp	r3, #255	@ 0xff
 8002dd8:	d801      	bhi.n	8002dde <HAL_GPIO_Init+0x13a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	e001      	b.n	8002de2 <HAL_GPIO_Init+0x13e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2bff      	cmp	r3, #255	@ 0xff
 8002de8:	d802      	bhi.n	8002df0 <HAL_GPIO_Init+0x14c>
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	e002      	b.n	8002df6 <HAL_GPIO_Init+0x152>
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	3b08      	subs	r3, #8
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	210f      	movs	r1, #15
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	6a39      	ldr	r1, [r7, #32]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80b1 	beq.w	8002f86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e24:	4b4d      	ldr	r3, [pc, #308]	@ (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a4c      	ldr	r2, [pc, #304]	@ (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b4a      	ldr	r3, [pc, #296]	@ (8002f5c <HAL_GPIO_Init+0x2b8>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e3c:	4a48      	ldr	r2, [pc, #288]	@ (8002f60 <HAL_GPIO_Init+0x2bc>)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a40      	ldr	r2, [pc, #256]	@ (8002f64 <HAL_GPIO_Init+0x2c0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d013      	beq.n	8002e90 <HAL_GPIO_Init+0x1ec>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f68 <HAL_GPIO_Init+0x2c4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00d      	beq.n	8002e8c <HAL_GPIO_Init+0x1e8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3e      	ldr	r2, [pc, #248]	@ (8002f6c <HAL_GPIO_Init+0x2c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <HAL_GPIO_Init+0x1e4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f70 <HAL_GPIO_Init+0x2cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_GPIO_Init+0x1e0>
 8002e80:	2303      	movs	r3, #3
 8002e82:	e006      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e84:	2304      	movs	r3, #4
 8002e86:	e004      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e002      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_GPIO_Init+0x1ee>
 8002e90:	2300      	movs	r3, #0
 8002e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e94:	f002 0203 	and.w	r2, r2, #3
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ea2:	492f      	ldr	r1, [pc, #188]	@ (8002f60 <HAL_GPIO_Init+0x2bc>)
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	492c      	ldr	r1, [pc, #176]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	4928      	ldr	r1, [pc, #160]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ee4:	4b23      	ldr	r3, [pc, #140]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	4922      	ldr	r1, [pc, #136]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60cb      	str	r3, [r1, #12]
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ef2:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	491e      	ldr	r1, [pc, #120]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4918      	ldr	r1, [pc, #96]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4914      	ldr	r1, [pc, #80]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d021      	beq.n	8002f78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	e021      	b.n	8002f86 <HAL_GPIO_Init+0x2e2>
 8002f42:	bf00      	nop
 8002f44:	10320000 	.word	0x10320000
 8002f48:	10310000 	.word	0x10310000
 8002f4c:	10220000 	.word	0x10220000
 8002f50:	10210000 	.word	0x10210000
 8002f54:	10120000 	.word	0x10120000
 8002f58:	10110000 	.word	0x10110000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010800 	.word	0x40010800
 8002f68:	40010c00 	.word	0x40010c00
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40011400 	.word	0x40011400
 8002f74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4909      	ldr	r1, [pc, #36]	@ (8002fa8 <HAL_GPIO_Init+0x304>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	3301      	adds	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f47f ae8e 	bne.w	8002cb8 <HAL_GPIO_Init+0x14>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	372c      	adds	r7, #44	@ 0x2c
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	40010400 	.word	0x40010400

08002fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e001      	b.n	8002fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	807b      	strh	r3, [r7, #2]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fea:	787b      	ldrb	r3, [r7, #1]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff0:	887a      	ldrh	r2, [r7, #2]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ff6:	e003      	b.n	8003000 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	041a      	lsls	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	611a      	str	r2, [r3, #16]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
	...

0800300c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003016:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe faa0 	bl	8001570 <HAL_GPIO_EXTI_Callback>
  }
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e12b      	b.n	80032a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fb8c 	bl	8002780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	@ 0x24
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800308e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800309e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a0:	f001 f960 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 80030a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a81      	ldr	r2, [pc, #516]	@ (80032b0 <HAL_I2C_Init+0x274>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d807      	bhi.n	80030c0 <HAL_I2C_Init+0x84>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a80      	ldr	r2, [pc, #512]	@ (80032b4 <HAL_I2C_Init+0x278>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bf94      	ite	ls
 80030b8:	2301      	movls	r3, #1
 80030ba:	2300      	movhi	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e006      	b.n	80030ce <HAL_I2C_Init+0x92>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a7d      	ldr	r2, [pc, #500]	@ (80032b8 <HAL_I2C_Init+0x27c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	bf94      	ite	ls
 80030c8:	2301      	movls	r3, #1
 80030ca:	2300      	movhi	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0e7      	b.n	80032a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a78      	ldr	r2, [pc, #480]	@ (80032bc <HAL_I2C_Init+0x280>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0c9b      	lsrs	r3, r3, #18
 80030e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a6a      	ldr	r2, [pc, #424]	@ (80032b0 <HAL_I2C_Init+0x274>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d802      	bhi.n	8003110 <HAL_I2C_Init+0xd4>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3301      	adds	r3, #1
 800310e:	e009      	b.n	8003124 <HAL_I2C_Init+0xe8>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	4a69      	ldr	r2, [pc, #420]	@ (80032c0 <HAL_I2C_Init+0x284>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	3301      	adds	r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003136:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	495c      	ldr	r1, [pc, #368]	@ (80032b0 <HAL_I2C_Init+0x274>)
 8003140:	428b      	cmp	r3, r1
 8003142:	d819      	bhi.n	8003178 <HAL_I2C_Init+0x13c>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e59      	subs	r1, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003158:	400b      	ands	r3, r1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_I2C_Init+0x138>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e59      	subs	r1, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fbb1 f3f3 	udiv	r3, r1, r3
 800316c:	3301      	adds	r3, #1
 800316e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003172:	e051      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 8003174:	2304      	movs	r3, #4
 8003176:	e04f      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d111      	bne.n	80031a4 <HAL_I2C_Init+0x168>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e012      	b.n	80031ca <HAL_I2C_Init+0x18e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Init+0x196>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e022      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10e      	bne.n	80031f8 <HAL_I2C_Init+0x1bc>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e58      	subs	r0, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	440b      	add	r3, r1
 80031e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031f6:	e00f      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	0099      	lsls	r1, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	6809      	ldr	r1, [r1, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003246:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6911      	ldr	r1, [r2, #16]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	4311      	orrs	r1, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	430b      	orrs	r3, r1
 800325a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	000186a0 	.word	0x000186a0
 80032b4:	001e847f 	.word	0x001e847f
 80032b8:	003d08ff 	.word	0x003d08ff
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	10624dd3 	.word	0x10624dd3

080032c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	461a      	mov	r2, r3
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
 80032d4:	4613      	mov	r3, r2
 80032d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff fba8 	bl	8002a2c <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	f040 80e0 	bne.w	80034ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2319      	movs	r3, #25
 80032f2:	2201      	movs	r2, #1
 80032f4:	4970      	ldr	r1, [pc, #448]	@ (80034b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa92 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	e0d3      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_I2C_Master_Transmit+0x50>
 8003310:	2302      	movs	r3, #2
 8003312:	e0cc      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d007      	beq.n	800333a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003348:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2221      	movs	r2, #33	@ 0x21
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2210      	movs	r2, #16
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	893a      	ldrh	r2, [r7, #8]
 800336a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a50      	ldr	r2, [pc, #320]	@ (80034bc <HAL_I2C_Master_Transmit+0x1f8>)
 800337a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6a3a      	ldr	r2, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f9ca 	bl	800371c <I2C_MasterRequestWrite>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e08d      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033a8:	e066      	b.n	8003478 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fb50 	bl	8003a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d107      	bne.n	80033d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e06b      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d11b      	bne.n	800344c <HAL_I2C_Master_Transmit+0x188>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	6a39      	ldr	r1, [r7, #32]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fb47 	bl	8003ae4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	2b04      	cmp	r3, #4
 8003462:	d107      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003472:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e01a      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	d194      	bne.n	80033aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	00100002 	.word	0x00100002
 80034bc:	ffff0000 	.word	0xffff0000

080034c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	@ 0x28
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	460b      	mov	r3, r1
 80034ce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034d0:	f7ff faac 	bl	8002a2c <HAL_GetTick>
 80034d4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	f040 8111 	bne.w	800370a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	2319      	movs	r3, #25
 80034ee:	2201      	movs	r2, #1
 80034f0:	4988      	ldr	r1, [pc, #544]	@ (8003714 <HAL_I2C_IsDeviceReady+0x254>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f994 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
 8003500:	e104      	b.n	800370c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_I2C_IsDeviceReady+0x50>
 800350c:	2302      	movs	r3, #2
 800350e:	e0fd      	b.n	800370c <HAL_I2C_IsDeviceReady+0x24c>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d007      	beq.n	8003536 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2224      	movs	r2, #36	@ 0x24
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a70      	ldr	r2, [pc, #448]	@ (8003718 <HAL_I2C_IsDeviceReady+0x258>)
 8003558:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003568:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f952 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003590:	d103      	bne.n	800359a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e0b6      	b.n	800370c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800359e:	897b      	ldrh	r3, [r7, #10]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035ac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035ae:	f7ff fa3d 	bl	8002a2c <HAL_GetTick>
 80035b2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035e2:	e025      	b.n	8003630 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035e4:	f7ff fa22 	bl	8002a2c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <HAL_I2C_IsDeviceReady+0x13a>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	22a0      	movs	r2, #160	@ 0xa0
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2ba0      	cmp	r3, #160	@ 0xa0
 800363a:	d005      	beq.n	8003648 <HAL_I2C_IsDeviceReady+0x188>
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <HAL_I2C_IsDeviceReady+0x188>
 8003642:	7dbb      	ldrb	r3, [r7, #22]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0cd      	beq.n	80035e4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d129      	bne.n	80036b2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2319      	movs	r3, #25
 800368a:	2201      	movs	r2, #1
 800368c:	4921      	ldr	r1, [pc, #132]	@ (8003714 <HAL_I2C_IsDeviceReady+0x254>)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f8c6 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e036      	b.n	800370c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e02c      	b.n	800370c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	2319      	movs	r3, #25
 80036d2:	2201      	movs	r2, #1
 80036d4:	490f      	ldr	r1, [pc, #60]	@ (8003714 <HAL_I2C_IsDeviceReady+0x254>)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8a2 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e012      	b.n	800370c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	f4ff af32 	bcc.w	800355a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800370a:	2302      	movs	r3, #2
  }
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	00100002 	.word	0x00100002
 8003718:	ffff0000 	.word	0xffff0000

0800371c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	460b      	mov	r3, r1
 800372a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d006      	beq.n	8003746 <I2C_MasterRequestWrite+0x2a>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d003      	beq.n	8003746 <I2C_MasterRequestWrite+0x2a>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003744:	d108      	bne.n	8003758 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e00b      	b.n	8003770 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375c:	2b12      	cmp	r3, #18
 800375e:	d107      	bne.n	8003770 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f84f 	bl	8003820 <I2C_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003796:	d103      	bne.n	80037a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e035      	b.n	8003810 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ac:	d108      	bne.n	80037c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037bc:	611a      	str	r2, [r3, #16]
 80037be:	e01b      	b.n	80037f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037c0:	897b      	ldrh	r3, [r7, #10]
 80037c2:	11db      	asrs	r3, r3, #7
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f003 0306 	and.w	r3, r3, #6
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f063 030f 	orn	r3, r3, #15
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	490e      	ldr	r1, [pc, #56]	@ (8003818 <I2C_MasterRequestWrite+0xfc>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f898 	bl	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e010      	b.n	8003810 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4907      	ldr	r1, [pc, #28]	@ (800381c <I2C_MasterRequestWrite+0x100>)
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f888 	bl	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	00010008 	.word	0x00010008
 800381c:	00010002 	.word	0x00010002

08003820 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003830:	e048      	b.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d044      	beq.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7ff f8f7 	bl	8002a2c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_WaitOnFlagUntilTimeout+0x30>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d139      	bne.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d10d      	bne.n	8003876 <I2C_WaitOnFlagUntilTimeout+0x56>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	43da      	mvns	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4013      	ands	r3, r2
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	e00c      	b.n	8003890 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	43da      	mvns	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4013      	ands	r3, r2
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	429a      	cmp	r2, r3
 8003894:	d116      	bne.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e023      	b.n	800390c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10d      	bne.n	80038ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	43da      	mvns	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	e00c      	b.n	8003904 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	43da      	mvns	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4013      	ands	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	429a      	cmp	r2, r3
 8003908:	d093      	beq.n	8003832 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003922:	e071      	b.n	8003a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003932:	d123      	bne.n	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003942:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800394c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	f043 0204 	orr.w	r2, r3, #4
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e067      	b.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d041      	beq.n	8003a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7ff f852 	bl	8002a2c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d136      	bne.n	8003a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10c      	bne.n	80039be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	e00b      	b.n	80039d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	43da      	mvns	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4013      	ands	r3, r2
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d016      	beq.n	8003a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e021      	b.n	8003a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d10c      	bne.n	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf14      	ite	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	2300      	moveq	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e00b      	b.n	8003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	43da      	mvns	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4013      	ands	r3, r2
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f47f af6d 	bne.w	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a60:	e034      	b.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f886 	bl	8003b74 <I2C_IsAcknowledgeFailed>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e034      	b.n	8003adc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d028      	beq.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fe ffd7 	bl	8002a2c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11d      	bne.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9a:	2b80      	cmp	r3, #128	@ 0x80
 8003a9c:	d016      	beq.n	8003acc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e007      	b.n	8003adc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	2b80      	cmp	r3, #128	@ 0x80
 8003ad8:	d1c3      	bne.n	8003a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003af0:	e034      	b.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f83e 	bl	8003b74 <I2C_IsAcknowledgeFailed>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e034      	b.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d028      	beq.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fe ff8f 	bl	8002a2c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11d      	bne.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d016      	beq.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e007      	b.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d1c3      	bne.n	8003af2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8a:	d11b      	bne.n	8003bc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	f043 0204 	orr.w	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e272      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf0:	4b92      	ldr	r3, [pc, #584]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d112      	bne.n	8003c2e <HAL_RCC_OscConfig+0x5e>
 8003c08:	4b8c      	ldr	r3, [pc, #560]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b89      	ldr	r3, [pc, #548]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x12c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e24c      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x76>
 8003c38:	4b80      	ldr	r3, [pc, #512]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd4>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7a      	ldr	r2, [pc, #488]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b78      	ldr	r3, [pc, #480]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a77      	ldr	r2, [pc, #476]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd4>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0xbc>
 8003c72:	4b72      	ldr	r3, [pc, #456]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a71      	ldr	r2, [pc, #452]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6e      	ldr	r2, [pc, #440]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd4>
 8003c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6a      	ldr	r2, [pc, #424]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b68      	ldr	r3, [pc, #416]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a67      	ldr	r2, [pc, #412]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe febe 	bl	8002a2c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe feba 	bl	8002a2c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	@ 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e200      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe4>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe feaa 	bl	8002a2c <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fea6 	bl	8002a2c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	@ 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1ec      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b53      	ldr	r3, [pc, #332]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x10c>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d16:	4b49      	ldr	r3, [pc, #292]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x18c>
 8003d22:	4b46      	ldr	r3, [pc, #280]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b43      	ldr	r3, [pc, #268]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x176>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1c0      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b3d      	ldr	r3, [pc, #244]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4939      	ldr	r1, [pc, #228]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e03a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b36      	ldr	r3, [pc, #216]	@ (8003e40 <HAL_RCC_OscConfig+0x270>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6a:	f7fe fe5f 	bl	8002a2c <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fe fe5b 	bl	8002a2c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a1      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	4b2d      	ldr	r3, [pc, #180]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b2a      	ldr	r3, [pc, #168]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4927      	ldr	r1, [pc, #156]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da6:	4b26      	ldr	r3, [pc, #152]	@ (8003e40 <HAL_RCC_OscConfig+0x270>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe fe3e 	bl	8002a2c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fe fe3a 	bl	8002a2c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e180      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d03a      	beq.n	8003e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d019      	beq.n	8003e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de6:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <HAL_RCC_OscConfig+0x274>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dec:	f7fe fe1e 	bl	8002a2c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe fe1a 	bl	8002a2c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e160      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <HAL_RCC_OscConfig+0x26c>)
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e12:	2001      	movs	r0, #1
 8003e14:	f000 faba 	bl	800438c <RCC_Delay>
 8003e18:	e01c      	b.n	8003e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e20:	f7fe fe04 	bl	8002a2c <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e26:	e00f      	b.n	8003e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fe fe00 	bl	8002a2c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d908      	bls.n	8003e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e146      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	42420000 	.word	0x42420000
 8003e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	4b92      	ldr	r3, [pc, #584]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e9      	bne.n	8003e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a6 	beq.w	8003fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e66:	4b8b      	ldr	r3, [pc, #556]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10d      	bne.n	8003e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	4b88      	ldr	r3, [pc, #544]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4a87      	ldr	r2, [pc, #540]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	61d3      	str	r3, [r2, #28]
 8003e7e:	4b85      	ldr	r3, [pc, #532]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b82      	ldr	r3, [pc, #520]	@ (8004098 <HAL_RCC_OscConfig+0x4c8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d118      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8004098 <HAL_RCC_OscConfig+0x4c8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004098 <HAL_RCC_OscConfig+0x4c8>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe fdc1 	bl	8002a2c <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7fe fdbd 	bl	8002a2c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	@ 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e103      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	4b75      	ldr	r3, [pc, #468]	@ (8004098 <HAL_RCC_OscConfig+0x4c8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x312>
 8003ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4a6e      	ldr	r2, [pc, #440]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6213      	str	r3, [r2, #32]
 8003ee0:	e02d      	b.n	8003f3e <HAL_RCC_OscConfig+0x36e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x334>
 8003eea:	4b6a      	ldr	r3, [pc, #424]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4a69      	ldr	r2, [pc, #420]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	6213      	str	r3, [r2, #32]
 8003ef6:	4b67      	ldr	r3, [pc, #412]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a66      	ldr	r2, [pc, #408]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	6213      	str	r3, [r2, #32]
 8003f02:	e01c      	b.n	8003f3e <HAL_RCC_OscConfig+0x36e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCC_OscConfig+0x356>
 8003f0c:	4b61      	ldr	r3, [pc, #388]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4a60      	ldr	r2, [pc, #384]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	6213      	str	r3, [r2, #32]
 8003f18:	4b5e      	ldr	r3, [pc, #376]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6213      	str	r3, [r2, #32]
 8003f24:	e00b      	b.n	8003f3e <HAL_RCC_OscConfig+0x36e>
 8003f26:	4b5b      	ldr	r3, [pc, #364]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4a5a      	ldr	r2, [pc, #360]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6213      	str	r3, [r2, #32]
 8003f32:	4b58      	ldr	r3, [pc, #352]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4a57      	ldr	r2, [pc, #348]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d015      	beq.n	8003f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fe fd71 	bl	8002a2c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fe fd6d 	bl	8002a2c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0b1      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f64:	4b4b      	ldr	r3, [pc, #300]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ee      	beq.n	8003f4e <HAL_RCC_OscConfig+0x37e>
 8003f70:	e014      	b.n	8003f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f72:	f7fe fd5b 	bl	8002a2c <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fe fd57 	bl	8002a2c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e09b      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f90:	4b40      	ldr	r3, [pc, #256]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ee      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4a3b      	ldr	r2, [pc, #236]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8087 	beq.w	80040c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb8:	4b36      	ldr	r3, [pc, #216]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d061      	beq.n	8004088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d146      	bne.n	800405a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	4b33      	ldr	r3, [pc, #204]	@ (800409c <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fe fd2b 	bl	8002a2c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fe fd27 	bl	8002a2c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e06d      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fec:	4b29      	ldr	r3, [pc, #164]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004000:	d108      	bne.n	8004014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004002:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4921      	ldr	r1, [pc, #132]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004014:	4b1f      	ldr	r3, [pc, #124]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a19      	ldr	r1, [r3, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	430b      	orrs	r3, r1
 8004026:	491b      	ldr	r1, [pc, #108]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402c:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <HAL_RCC_OscConfig+0x4cc>)
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe fcfb 	bl	8002a2c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe fcf7 	bl	8002a2c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e03d      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800404c:	4b11      	ldr	r3, [pc, #68]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x46a>
 8004058:	e035      	b.n	80040c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	4b10      	ldr	r3, [pc, #64]	@ (800409c <HAL_RCC_OscConfig+0x4cc>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe fce4 	bl	8002a2c <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fe fce0 	bl	8002a2c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e026      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCC_OscConfig+0x4c4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x498>
 8004086:	e01e      	b.n	80040c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d107      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e019      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
 800409c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCC_OscConfig+0x500>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000

080040d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0d0      	b.n	800428a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d910      	bls.n	8004118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b67      	ldr	r3, [pc, #412]	@ (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 0207 	bic.w	r2, r3, #7
 80040fe:	4965      	ldr	r1, [pc, #404]	@ (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b63      	ldr	r3, [pc, #396]	@ (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0b8      	b.n	800428a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004130:	4b59      	ldr	r3, [pc, #356]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a58      	ldr	r2, [pc, #352]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800413a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004148:	4b53      	ldr	r3, [pc, #332]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4a52      	ldr	r2, [pc, #328]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004154:	4b50      	ldr	r3, [pc, #320]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	494d      	ldr	r1, [pc, #308]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d040      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417a:	4b47      	ldr	r3, [pc, #284]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d115      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e07f      	b.n	800428a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004192:	4b41      	ldr	r3, [pc, #260]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e073      	b.n	800428a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06b      	b.n	800428a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b2:	4b39      	ldr	r3, [pc, #228]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f023 0203 	bic.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4936      	ldr	r1, [pc, #216]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c4:	f7fe fc32 	bl	8002a2c <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041cc:	f7fe fc2e 	bl	8002a2c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e053      	b.n	800428a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 020c 	and.w	r2, r3, #12
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1eb      	bne.n	80041cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f4:	4b27      	ldr	r3, [pc, #156]	@ (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d210      	bcs.n	8004224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 0207 	bic.w	r2, r3, #7
 800420a:	4922      	ldr	r1, [pc, #136]	@ (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b20      	ldr	r3, [pc, #128]	@ (8004294 <HAL_RCC_ClockConfig+0x1c0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e032      	b.n	800428a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004230:	4b19      	ldr	r3, [pc, #100]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4916      	ldr	r1, [pc, #88]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800424e:	4b12      	ldr	r3, [pc, #72]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	490e      	ldr	r1, [pc, #56]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004262:	f000 f821 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004266:	4602      	mov	r2, r0
 8004268:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	490a      	ldr	r1, [pc, #40]	@ (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	5ccb      	ldrb	r3, [r1, r3]
 8004276:	fa22 f303 	lsr.w	r3, r2, r3
 800427a:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <HAL_RCC_ClockConfig+0x1cc>)
 800427c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800427e:	4b09      	ldr	r3, [pc, #36]	@ (80042a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fb90 	bl	80029a8 <HAL_InitTick>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40022000 	.word	0x40022000
 8004298:	40021000 	.word	0x40021000
 800429c:	08007c2c 	.word	0x08007c2c
 80042a0:	20000018 	.word	0x20000018
 80042a4:	2000001c 	.word	0x2000001c

080042a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042c2:	4b1e      	ldr	r3, [pc, #120]	@ (800433c <HAL_RCC_GetSysClockFreq+0x94>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x30>
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d003      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0x36>
 80042d6:	e027      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042d8:	4b19      	ldr	r3, [pc, #100]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x98>)
 80042da:	613b      	str	r3, [r7, #16]
      break;
 80042dc:	e027      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	0c9b      	lsrs	r3, r3, #18
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	4a17      	ldr	r2, [pc, #92]	@ (8004344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042e8:	5cd3      	ldrb	r3, [r2, r3]
 80042ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042f6:	4b11      	ldr	r3, [pc, #68]	@ (800433c <HAL_RCC_GetSysClockFreq+0x94>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	0c5b      	lsrs	r3, r3, #17
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	4a11      	ldr	r2, [pc, #68]	@ (8004348 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004302:	5cd3      	ldrb	r3, [r2, r3]
 8004304:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a0d      	ldr	r2, [pc, #52]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x98>)
 800430a:	fb03 f202 	mul.w	r2, r3, r2
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e004      	b.n	8004322 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0c      	ldr	r2, [pc, #48]	@ (800434c <HAL_RCC_GetSysClockFreq+0xa4>)
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	613b      	str	r3, [r7, #16]
      break;
 8004326:	e002      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x98>)
 800432a:	613b      	str	r3, [r7, #16]
      break;
 800432c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800432e:	693b      	ldr	r3, [r7, #16]
}
 8004330:	4618      	mov	r0, r3
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	007a1200 	.word	0x007a1200
 8004344:	08007c44 	.word	0x08007c44
 8004348:	08007c54 	.word	0x08007c54
 800434c:	003d0900 	.word	0x003d0900

08004350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b02      	ldr	r3, [pc, #8]	@ (8004360 <HAL_RCC_GetHCLKFreq+0x10>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	20000018 	.word	0x20000018

08004364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004368:	f7ff fff2 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4903      	ldr	r1, [pc, #12]	@ (8004388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000
 8004388:	08007c3c 	.word	0x08007c3c

0800438c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004394:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <RCC_Delay+0x34>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <RCC_Delay+0x38>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	0a5b      	lsrs	r3, r3, #9
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043a8:	bf00      	nop
  }
  while (Delay --);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1e5a      	subs	r2, r3, #1
 80043ae:	60fa      	str	r2, [r7, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f9      	bne.n	80043a8 <RCC_Delay+0x1c>
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	20000018 	.word	0x20000018
 80043c4:	10624dd3 	.word	0x10624dd3

080043c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e041      	b.n	800445e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fe fa06 	bl	8002800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 f940 	bl	800468c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d001      	beq.n	8004480 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e032      	b.n	80044e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a18      	ldr	r2, [pc, #96]	@ (80044f0 <HAL_TIM_Base_Start+0x88>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_Base_Start+0x48>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_Base_Start+0x48>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <HAL_TIM_Base_Start+0x8c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_Base_Start+0x48>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a13      	ldr	r2, [pc, #76]	@ (80044f8 <HAL_TIM_Base_Start+0x90>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d010      	beq.n	80044e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	e007      	b.n	80044e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800

080044fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIM_ConfigClockSource+0x1c>
 8004514:	2302      	movs	r3, #2
 8004516:	e0b4      	b.n	8004682 <HAL_TIM_ConfigClockSource+0x186>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800453e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004550:	d03e      	beq.n	80045d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004556:	f200 8087 	bhi.w	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455e:	f000 8086 	beq.w	800466e <HAL_TIM_ConfigClockSource+0x172>
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004566:	d87f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b70      	cmp	r3, #112	@ 0x70
 800456a:	d01a      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xa6>
 800456c:	2b70      	cmp	r3, #112	@ 0x70
 800456e:	d87b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b60      	cmp	r3, #96	@ 0x60
 8004572:	d050      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x11a>
 8004574:	2b60      	cmp	r3, #96	@ 0x60
 8004576:	d877      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b50      	cmp	r3, #80	@ 0x50
 800457a:	d03c      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0xfa>
 800457c:	2b50      	cmp	r3, #80	@ 0x50
 800457e:	d873      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d058      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x13a>
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d86f      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b30      	cmp	r3, #48	@ 0x30
 800458a:	d064      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d86b      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d060      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d867      	bhi.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05c      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	2b10      	cmp	r3, #16
 800459e:	d05a      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x15a>
 80045a0:	e062      	b.n	8004668 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	f000 f950 	bl	8004856 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	609a      	str	r2, [r3, #8]
      break;
 80045ce:	e04f      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	f000 f939 	bl	8004856 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f2:	609a      	str	r2, [r3, #8]
      break;
 80045f4:	e03c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004602:	461a      	mov	r2, r3
 8004604:	f000 f8b0 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2150      	movs	r1, #80	@ 0x50
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f907 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 8004614:	e02c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004622:	461a      	mov	r2, r3
 8004624:	f000 f8ce 	bl	80047c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2160      	movs	r1, #96	@ 0x60
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f8f7 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 8004634:	e01c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	461a      	mov	r2, r3
 8004644:	f000 f890 	bl	8004768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2140      	movs	r1, #64	@ 0x40
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f8e7 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 8004654:	e00c      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f000 f8de 	bl	8004822 <TIM_ITRx_SetConfig>
      break;
 8004666:	e003      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e000      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800466e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a2f      	ldr	r2, [pc, #188]	@ (800475c <TIM_Base_SetConfig+0xd0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00b      	beq.n	80046bc <TIM_Base_SetConfig+0x30>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046aa:	d007      	beq.n	80046bc <TIM_Base_SetConfig+0x30>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <TIM_Base_SetConfig+0xd4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_Base_SetConfig+0x30>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <TIM_Base_SetConfig+0xd8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d108      	bne.n	80046ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a22      	ldr	r2, [pc, #136]	@ (800475c <TIM_Base_SetConfig+0xd0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00b      	beq.n	80046ee <TIM_Base_SetConfig+0x62>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046dc:	d007      	beq.n	80046ee <TIM_Base_SetConfig+0x62>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004760 <TIM_Base_SetConfig+0xd4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_Base_SetConfig+0x62>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004764 <TIM_Base_SetConfig+0xd8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a0d      	ldr	r2, [pc, #52]	@ (800475c <TIM_Base_SetConfig+0xd0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d103      	bne.n	8004734 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	611a      	str	r2, [r3, #16]
  }
}
 8004752:	bf00      	nop
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800

08004768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0201 	bic.w	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 030a 	bic.w	r3, r3, #10
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0210 	bic.w	r2, r3, #16
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004800:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	f043 0307 	orr.w	r3, r3, #7
 8004844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004856:	b480      	push	{r7}
 8004858:	b087      	sub	sp, #28
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004870:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	021a      	lsls	r2, r3, #8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	431a      	orrs	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e046      	b.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a16      	ldr	r2, [pc, #88]	@ (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f8:	d009      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a12      	ldr	r2, [pc, #72]	@ (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a10      	ldr	r2, [pc, #64]	@ (800494c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d10c      	bne.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	4313      	orrs	r3, r2
 800491e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800

08004950 <__itoa>:
 8004950:	1e93      	subs	r3, r2, #2
 8004952:	2b22      	cmp	r3, #34	@ 0x22
 8004954:	b510      	push	{r4, lr}
 8004956:	460c      	mov	r4, r1
 8004958:	d904      	bls.n	8004964 <__itoa+0x14>
 800495a:	2300      	movs	r3, #0
 800495c:	461c      	mov	r4, r3
 800495e:	700b      	strb	r3, [r1, #0]
 8004960:	4620      	mov	r0, r4
 8004962:	bd10      	pop	{r4, pc}
 8004964:	2a0a      	cmp	r2, #10
 8004966:	d109      	bne.n	800497c <__itoa+0x2c>
 8004968:	2800      	cmp	r0, #0
 800496a:	da07      	bge.n	800497c <__itoa+0x2c>
 800496c:	232d      	movs	r3, #45	@ 0x2d
 800496e:	700b      	strb	r3, [r1, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	4240      	negs	r0, r0
 8004974:	4421      	add	r1, r4
 8004976:	f000 f805 	bl	8004984 <__utoa>
 800497a:	e7f1      	b.n	8004960 <__itoa+0x10>
 800497c:	2100      	movs	r1, #0
 800497e:	e7f9      	b.n	8004974 <__itoa+0x24>

08004980 <itoa>:
 8004980:	f7ff bfe6 	b.w	8004950 <__itoa>

08004984 <__utoa>:
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	b08b      	sub	sp, #44	@ 0x2c
 8004988:	4605      	mov	r5, r0
 800498a:	460b      	mov	r3, r1
 800498c:	466e      	mov	r6, sp
 800498e:	4c1d      	ldr	r4, [pc, #116]	@ (8004a04 <__utoa+0x80>)
 8004990:	f104 0c20 	add.w	ip, r4, #32
 8004994:	4637      	mov	r7, r6
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	6861      	ldr	r1, [r4, #4]
 800499a:	3408      	adds	r4, #8
 800499c:	c703      	stmia	r7!, {r0, r1}
 800499e:	4564      	cmp	r4, ip
 80049a0:	463e      	mov	r6, r7
 80049a2:	d1f7      	bne.n	8004994 <__utoa+0x10>
 80049a4:	7921      	ldrb	r1, [r4, #4]
 80049a6:	6820      	ldr	r0, [r4, #0]
 80049a8:	7139      	strb	r1, [r7, #4]
 80049aa:	1e91      	subs	r1, r2, #2
 80049ac:	2922      	cmp	r1, #34	@ 0x22
 80049ae:	6038      	str	r0, [r7, #0]
 80049b0:	f04f 0100 	mov.w	r1, #0
 80049b4:	d904      	bls.n	80049c0 <__utoa+0x3c>
 80049b6:	7019      	strb	r1, [r3, #0]
 80049b8:	460b      	mov	r3, r1
 80049ba:	4618      	mov	r0, r3
 80049bc:	b00b      	add	sp, #44	@ 0x2c
 80049be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c0:	1e58      	subs	r0, r3, #1
 80049c2:	4684      	mov	ip, r0
 80049c4:	fbb5 f7f2 	udiv	r7, r5, r2
 80049c8:	fb02 5617 	mls	r6, r2, r7, r5
 80049cc:	3628      	adds	r6, #40	@ 0x28
 80049ce:	446e      	add	r6, sp
 80049d0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80049d4:	460c      	mov	r4, r1
 80049d6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80049da:	462e      	mov	r6, r5
 80049dc:	42b2      	cmp	r2, r6
 80049de:	463d      	mov	r5, r7
 80049e0:	f101 0101 	add.w	r1, r1, #1
 80049e4:	d9ee      	bls.n	80049c4 <__utoa+0x40>
 80049e6:	2200      	movs	r2, #0
 80049e8:	545a      	strb	r2, [r3, r1]
 80049ea:	1919      	adds	r1, r3, r4
 80049ec:	1aa5      	subs	r5, r4, r2
 80049ee:	42aa      	cmp	r2, r5
 80049f0:	dae3      	bge.n	80049ba <__utoa+0x36>
 80049f2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80049f6:	780e      	ldrb	r6, [r1, #0]
 80049f8:	3201      	adds	r2, #1
 80049fa:	7006      	strb	r6, [r0, #0]
 80049fc:	f801 5901 	strb.w	r5, [r1], #-1
 8004a00:	e7f4      	b.n	80049ec <__utoa+0x68>
 8004a02:	bf00      	nop
 8004a04:	08007c56 	.word	0x08007c56

08004a08 <siprintf>:
 8004a08:	b40e      	push	{r1, r2, r3}
 8004a0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a0e:	b500      	push	{lr}
 8004a10:	b09c      	sub	sp, #112	@ 0x70
 8004a12:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a14:	9002      	str	r0, [sp, #8]
 8004a16:	9006      	str	r0, [sp, #24]
 8004a18:	9107      	str	r1, [sp, #28]
 8004a1a:	9104      	str	r1, [sp, #16]
 8004a1c:	4808      	ldr	r0, [pc, #32]	@ (8004a40 <siprintf+0x38>)
 8004a1e:	4909      	ldr	r1, [pc, #36]	@ (8004a44 <siprintf+0x3c>)
 8004a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a24:	9105      	str	r1, [sp, #20]
 8004a26:	6800      	ldr	r0, [r0, #0]
 8004a28:	a902      	add	r1, sp, #8
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	f000 f992 	bl	8004d54 <_svfiprintf_r>
 8004a30:	2200      	movs	r2, #0
 8004a32:	9b02      	ldr	r3, [sp, #8]
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	b01c      	add	sp, #112	@ 0x70
 8004a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a3c:	b003      	add	sp, #12
 8004a3e:	4770      	bx	lr
 8004a40:	20000024 	.word	0x20000024
 8004a44:	ffff0208 	.word	0xffff0208

08004a48 <memset>:
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4402      	add	r2, r0
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d100      	bne.n	8004a52 <memset+0xa>
 8004a50:	4770      	bx	lr
 8004a52:	f803 1b01 	strb.w	r1, [r3], #1
 8004a56:	e7f9      	b.n	8004a4c <memset+0x4>

08004a58 <__errno>:
 8004a58:	4b01      	ldr	r3, [pc, #4]	@ (8004a60 <__errno+0x8>)
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000024 	.word	0x20000024

08004a64 <__libc_init_array>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	2600      	movs	r6, #0
 8004a68:	4d0c      	ldr	r5, [pc, #48]	@ (8004a9c <__libc_init_array+0x38>)
 8004a6a:	4c0d      	ldr	r4, [pc, #52]	@ (8004aa0 <__libc_init_array+0x3c>)
 8004a6c:	1b64      	subs	r4, r4, r5
 8004a6e:	10a4      	asrs	r4, r4, #2
 8004a70:	42a6      	cmp	r6, r4
 8004a72:	d109      	bne.n	8004a88 <__libc_init_array+0x24>
 8004a74:	f000 fc78 	bl	8005368 <_init>
 8004a78:	2600      	movs	r6, #0
 8004a7a:	4d0a      	ldr	r5, [pc, #40]	@ (8004aa4 <__libc_init_array+0x40>)
 8004a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8004aa8 <__libc_init_array+0x44>)
 8004a7e:	1b64      	subs	r4, r4, r5
 8004a80:	10a4      	asrs	r4, r4, #2
 8004a82:	42a6      	cmp	r6, r4
 8004a84:	d105      	bne.n	8004a92 <__libc_init_array+0x2e>
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
 8004a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8c:	4798      	blx	r3
 8004a8e:	3601      	adds	r6, #1
 8004a90:	e7ee      	b.n	8004a70 <__libc_init_array+0xc>
 8004a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a96:	4798      	blx	r3
 8004a98:	3601      	adds	r6, #1
 8004a9a:	e7f2      	b.n	8004a82 <__libc_init_array+0x1e>
 8004a9c:	08007cb0 	.word	0x08007cb0
 8004aa0:	08007cb0 	.word	0x08007cb0
 8004aa4:	08007cb0 	.word	0x08007cb0
 8004aa8:	08007cb4 	.word	0x08007cb4

08004aac <__retarget_lock_acquire_recursive>:
 8004aac:	4770      	bx	lr

08004aae <__retarget_lock_release_recursive>:
 8004aae:	4770      	bx	lr

08004ab0 <_free_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	d040      	beq.n	8004b3a <_free_r+0x8a>
 8004ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004abc:	1f0c      	subs	r4, r1, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	bfb8      	it	lt
 8004ac2:	18e4      	addlt	r4, r4, r3
 8004ac4:	f000 f8de 	bl	8004c84 <__malloc_lock>
 8004ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b3c <_free_r+0x8c>)
 8004aca:	6813      	ldr	r3, [r2, #0]
 8004acc:	b933      	cbnz	r3, 8004adc <_free_r+0x2c>
 8004ace:	6063      	str	r3, [r4, #4]
 8004ad0:	6014      	str	r4, [r2, #0]
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad8:	f000 b8da 	b.w	8004c90 <__malloc_unlock>
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	d908      	bls.n	8004af2 <_free_r+0x42>
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	1821      	adds	r1, r4, r0
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	bf01      	itttt	eq
 8004ae8:	6819      	ldreq	r1, [r3, #0]
 8004aea:	685b      	ldreq	r3, [r3, #4]
 8004aec:	1809      	addeq	r1, r1, r0
 8004aee:	6021      	streq	r1, [r4, #0]
 8004af0:	e7ed      	b.n	8004ace <_free_r+0x1e>
 8004af2:	461a      	mov	r2, r3
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	b10b      	cbz	r3, 8004afc <_free_r+0x4c>
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d9fa      	bls.n	8004af2 <_free_r+0x42>
 8004afc:	6811      	ldr	r1, [r2, #0]
 8004afe:	1850      	adds	r0, r2, r1
 8004b00:	42a0      	cmp	r0, r4
 8004b02:	d10b      	bne.n	8004b1c <_free_r+0x6c>
 8004b04:	6820      	ldr	r0, [r4, #0]
 8004b06:	4401      	add	r1, r0
 8004b08:	1850      	adds	r0, r2, r1
 8004b0a:	4283      	cmp	r3, r0
 8004b0c:	6011      	str	r1, [r2, #0]
 8004b0e:	d1e0      	bne.n	8004ad2 <_free_r+0x22>
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4408      	add	r0, r1
 8004b16:	6010      	str	r0, [r2, #0]
 8004b18:	6053      	str	r3, [r2, #4]
 8004b1a:	e7da      	b.n	8004ad2 <_free_r+0x22>
 8004b1c:	d902      	bls.n	8004b24 <_free_r+0x74>
 8004b1e:	230c      	movs	r3, #12
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	e7d6      	b.n	8004ad2 <_free_r+0x22>
 8004b24:	6820      	ldr	r0, [r4, #0]
 8004b26:	1821      	adds	r1, r4, r0
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	bf01      	itttt	eq
 8004b2c:	6819      	ldreq	r1, [r3, #0]
 8004b2e:	685b      	ldreq	r3, [r3, #4]
 8004b30:	1809      	addeq	r1, r1, r0
 8004b32:	6021      	streq	r1, [r4, #0]
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	6054      	str	r4, [r2, #4]
 8004b38:	e7cb      	b.n	8004ad2 <_free_r+0x22>
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	200006d4 	.word	0x200006d4

08004b40 <sbrk_aligned>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	4e0f      	ldr	r6, [pc, #60]	@ (8004b80 <sbrk_aligned+0x40>)
 8004b44:	460c      	mov	r4, r1
 8004b46:	6831      	ldr	r1, [r6, #0]
 8004b48:	4605      	mov	r5, r0
 8004b4a:	b911      	cbnz	r1, 8004b52 <sbrk_aligned+0x12>
 8004b4c:	f000 fbaa 	bl	80052a4 <_sbrk_r>
 8004b50:	6030      	str	r0, [r6, #0]
 8004b52:	4621      	mov	r1, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	f000 fba5 	bl	80052a4 <_sbrk_r>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	d103      	bne.n	8004b66 <sbrk_aligned+0x26>
 8004b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8004b62:	4620      	mov	r0, r4
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	1cc4      	adds	r4, r0, #3
 8004b68:	f024 0403 	bic.w	r4, r4, #3
 8004b6c:	42a0      	cmp	r0, r4
 8004b6e:	d0f8      	beq.n	8004b62 <sbrk_aligned+0x22>
 8004b70:	1a21      	subs	r1, r4, r0
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 fb96 	bl	80052a4 <_sbrk_r>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d1f2      	bne.n	8004b62 <sbrk_aligned+0x22>
 8004b7c:	e7ef      	b.n	8004b5e <sbrk_aligned+0x1e>
 8004b7e:	bf00      	nop
 8004b80:	200006d0 	.word	0x200006d0

08004b84 <_malloc_r>:
 8004b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b88:	1ccd      	adds	r5, r1, #3
 8004b8a:	f025 0503 	bic.w	r5, r5, #3
 8004b8e:	3508      	adds	r5, #8
 8004b90:	2d0c      	cmp	r5, #12
 8004b92:	bf38      	it	cc
 8004b94:	250c      	movcc	r5, #12
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	4606      	mov	r6, r0
 8004b9a:	db01      	blt.n	8004ba0 <_malloc_r+0x1c>
 8004b9c:	42a9      	cmp	r1, r5
 8004b9e:	d904      	bls.n	8004baa <_malloc_r+0x26>
 8004ba0:	230c      	movs	r3, #12
 8004ba2:	6033      	str	r3, [r6, #0]
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004baa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c80 <_malloc_r+0xfc>
 8004bae:	f000 f869 	bl	8004c84 <__malloc_lock>
 8004bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8004bb6:	461c      	mov	r4, r3
 8004bb8:	bb44      	cbnz	r4, 8004c0c <_malloc_r+0x88>
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f7ff ffbf 	bl	8004b40 <sbrk_aligned>
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	d158      	bne.n	8004c7a <_malloc_r+0xf6>
 8004bc8:	f8d8 4000 	ldr.w	r4, [r8]
 8004bcc:	4627      	mov	r7, r4
 8004bce:	2f00      	cmp	r7, #0
 8004bd0:	d143      	bne.n	8004c5a <_malloc_r+0xd6>
 8004bd2:	2c00      	cmp	r4, #0
 8004bd4:	d04b      	beq.n	8004c6e <_malloc_r+0xea>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	4639      	mov	r1, r7
 8004bda:	4630      	mov	r0, r6
 8004bdc:	eb04 0903 	add.w	r9, r4, r3
 8004be0:	f000 fb60 	bl	80052a4 <_sbrk_r>
 8004be4:	4581      	cmp	r9, r0
 8004be6:	d142      	bne.n	8004c6e <_malloc_r+0xea>
 8004be8:	6821      	ldr	r1, [r4, #0]
 8004bea:	4630      	mov	r0, r6
 8004bec:	1a6d      	subs	r5, r5, r1
 8004bee:	4629      	mov	r1, r5
 8004bf0:	f7ff ffa6 	bl	8004b40 <sbrk_aligned>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d03a      	beq.n	8004c6e <_malloc_r+0xea>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	442b      	add	r3, r5
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	bb62      	cbnz	r2, 8004c60 <_malloc_r+0xdc>
 8004c06:	f8c8 7000 	str.w	r7, [r8]
 8004c0a:	e00f      	b.n	8004c2c <_malloc_r+0xa8>
 8004c0c:	6822      	ldr	r2, [r4, #0]
 8004c0e:	1b52      	subs	r2, r2, r5
 8004c10:	d420      	bmi.n	8004c54 <_malloc_r+0xd0>
 8004c12:	2a0b      	cmp	r2, #11
 8004c14:	d917      	bls.n	8004c46 <_malloc_r+0xc2>
 8004c16:	1961      	adds	r1, r4, r5
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	6025      	str	r5, [r4, #0]
 8004c1c:	bf18      	it	ne
 8004c1e:	6059      	strne	r1, [r3, #4]
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	bf08      	it	eq
 8004c24:	f8c8 1000 	streq.w	r1, [r8]
 8004c28:	5162      	str	r2, [r4, r5]
 8004c2a:	604b      	str	r3, [r1, #4]
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f000 f82f 	bl	8004c90 <__malloc_unlock>
 8004c32:	f104 000b 	add.w	r0, r4, #11
 8004c36:	1d23      	adds	r3, r4, #4
 8004c38:	f020 0007 	bic.w	r0, r0, #7
 8004c3c:	1ac2      	subs	r2, r0, r3
 8004c3e:	bf1c      	itt	ne
 8004c40:	1a1b      	subne	r3, r3, r0
 8004c42:	50a3      	strne	r3, [r4, r2]
 8004c44:	e7af      	b.n	8004ba6 <_malloc_r+0x22>
 8004c46:	6862      	ldr	r2, [r4, #4]
 8004c48:	42a3      	cmp	r3, r4
 8004c4a:	bf0c      	ite	eq
 8004c4c:	f8c8 2000 	streq.w	r2, [r8]
 8004c50:	605a      	strne	r2, [r3, #4]
 8004c52:	e7eb      	b.n	8004c2c <_malloc_r+0xa8>
 8004c54:	4623      	mov	r3, r4
 8004c56:	6864      	ldr	r4, [r4, #4]
 8004c58:	e7ae      	b.n	8004bb8 <_malloc_r+0x34>
 8004c5a:	463c      	mov	r4, r7
 8004c5c:	687f      	ldr	r7, [r7, #4]
 8004c5e:	e7b6      	b.n	8004bce <_malloc_r+0x4a>
 8004c60:	461a      	mov	r2, r3
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	42a3      	cmp	r3, r4
 8004c66:	d1fb      	bne.n	8004c60 <_malloc_r+0xdc>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6053      	str	r3, [r2, #4]
 8004c6c:	e7de      	b.n	8004c2c <_malloc_r+0xa8>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	4630      	mov	r0, r6
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	f000 f80c 	bl	8004c90 <__malloc_unlock>
 8004c78:	e794      	b.n	8004ba4 <_malloc_r+0x20>
 8004c7a:	6005      	str	r5, [r0, #0]
 8004c7c:	e7d6      	b.n	8004c2c <_malloc_r+0xa8>
 8004c7e:	bf00      	nop
 8004c80:	200006d4 	.word	0x200006d4

08004c84 <__malloc_lock>:
 8004c84:	4801      	ldr	r0, [pc, #4]	@ (8004c8c <__malloc_lock+0x8>)
 8004c86:	f7ff bf11 	b.w	8004aac <__retarget_lock_acquire_recursive>
 8004c8a:	bf00      	nop
 8004c8c:	200006cc 	.word	0x200006cc

08004c90 <__malloc_unlock>:
 8004c90:	4801      	ldr	r0, [pc, #4]	@ (8004c98 <__malloc_unlock+0x8>)
 8004c92:	f7ff bf0c 	b.w	8004aae <__retarget_lock_release_recursive>
 8004c96:	bf00      	nop
 8004c98:	200006cc 	.word	0x200006cc

08004c9c <__ssputs_r>:
 8004c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca0:	461f      	mov	r7, r3
 8004ca2:	688e      	ldr	r6, [r1, #8]
 8004ca4:	4682      	mov	sl, r0
 8004ca6:	42be      	cmp	r6, r7
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4690      	mov	r8, r2
 8004cac:	680b      	ldr	r3, [r1, #0]
 8004cae:	d82d      	bhi.n	8004d0c <__ssputs_r+0x70>
 8004cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cb8:	d026      	beq.n	8004d08 <__ssputs_r+0x6c>
 8004cba:	6965      	ldr	r5, [r4, #20]
 8004cbc:	6909      	ldr	r1, [r1, #16]
 8004cbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cc2:	eba3 0901 	sub.w	r9, r3, r1
 8004cc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cca:	1c7b      	adds	r3, r7, #1
 8004ccc:	444b      	add	r3, r9
 8004cce:	106d      	asrs	r5, r5, #1
 8004cd0:	429d      	cmp	r5, r3
 8004cd2:	bf38      	it	cc
 8004cd4:	461d      	movcc	r5, r3
 8004cd6:	0553      	lsls	r3, r2, #21
 8004cd8:	d527      	bpl.n	8004d2a <__ssputs_r+0x8e>
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f7ff ff52 	bl	8004b84 <_malloc_r>
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	b360      	cbz	r0, 8004d3e <__ssputs_r+0xa2>
 8004ce4:	464a      	mov	r2, r9
 8004ce6:	6921      	ldr	r1, [r4, #16]
 8004ce8:	f000 fafa 	bl	80052e0 <memcpy>
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	6126      	str	r6, [r4, #16]
 8004cfa:	444e      	add	r6, r9
 8004cfc:	6026      	str	r6, [r4, #0]
 8004cfe:	463e      	mov	r6, r7
 8004d00:	6165      	str	r5, [r4, #20]
 8004d02:	eba5 0509 	sub.w	r5, r5, r9
 8004d06:	60a5      	str	r5, [r4, #8]
 8004d08:	42be      	cmp	r6, r7
 8004d0a:	d900      	bls.n	8004d0e <__ssputs_r+0x72>
 8004d0c:	463e      	mov	r6, r7
 8004d0e:	4632      	mov	r2, r6
 8004d10:	4641      	mov	r1, r8
 8004d12:	6820      	ldr	r0, [r4, #0]
 8004d14:	f000 faac 	bl	8005270 <memmove>
 8004d18:	2000      	movs	r0, #0
 8004d1a:	68a3      	ldr	r3, [r4, #8]
 8004d1c:	1b9b      	subs	r3, r3, r6
 8004d1e:	60a3      	str	r3, [r4, #8]
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	4433      	add	r3, r6
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	f000 fae6 	bl	80052fc <_realloc_r>
 8004d30:	4606      	mov	r6, r0
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d1e0      	bne.n	8004cf8 <__ssputs_r+0x5c>
 8004d36:	4650      	mov	r0, sl
 8004d38:	6921      	ldr	r1, [r4, #16]
 8004d3a:	f7ff feb9 	bl	8004ab0 <_free_r>
 8004d3e:	230c      	movs	r3, #12
 8004d40:	f8ca 3000 	str.w	r3, [sl]
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d4e:	81a3      	strh	r3, [r4, #12]
 8004d50:	e7e9      	b.n	8004d26 <__ssputs_r+0x8a>
	...

08004d54 <_svfiprintf_r>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	4698      	mov	r8, r3
 8004d5a:	898b      	ldrh	r3, [r1, #12]
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	460d      	mov	r5, r1
 8004d62:	4614      	mov	r4, r2
 8004d64:	b09d      	sub	sp, #116	@ 0x74
 8004d66:	d510      	bpl.n	8004d8a <_svfiprintf_r+0x36>
 8004d68:	690b      	ldr	r3, [r1, #16]
 8004d6a:	b973      	cbnz	r3, 8004d8a <_svfiprintf_r+0x36>
 8004d6c:	2140      	movs	r1, #64	@ 0x40
 8004d6e:	f7ff ff09 	bl	8004b84 <_malloc_r>
 8004d72:	6028      	str	r0, [r5, #0]
 8004d74:	6128      	str	r0, [r5, #16]
 8004d76:	b930      	cbnz	r0, 8004d86 <_svfiprintf_r+0x32>
 8004d78:	230c      	movs	r3, #12
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	b01d      	add	sp, #116	@ 0x74
 8004d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d86:	2340      	movs	r3, #64	@ 0x40
 8004d88:	616b      	str	r3, [r5, #20]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d8e:	2320      	movs	r3, #32
 8004d90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d94:	2330      	movs	r3, #48	@ 0x30
 8004d96:	f04f 0901 	mov.w	r9, #1
 8004d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d9e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004f38 <_svfiprintf_r+0x1e4>
 8004da2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004da6:	4623      	mov	r3, r4
 8004da8:	469a      	mov	sl, r3
 8004daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dae:	b10a      	cbz	r2, 8004db4 <_svfiprintf_r+0x60>
 8004db0:	2a25      	cmp	r2, #37	@ 0x25
 8004db2:	d1f9      	bne.n	8004da8 <_svfiprintf_r+0x54>
 8004db4:	ebba 0b04 	subs.w	fp, sl, r4
 8004db8:	d00b      	beq.n	8004dd2 <_svfiprintf_r+0x7e>
 8004dba:	465b      	mov	r3, fp
 8004dbc:	4622      	mov	r2, r4
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	f7ff ff6b 	bl	8004c9c <__ssputs_r>
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f000 80a7 	beq.w	8004f1a <_svfiprintf_r+0x1c6>
 8004dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dce:	445a      	add	r2, fp
 8004dd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 809f 	beq.w	8004f1a <_svfiprintf_r+0x1c6>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f04f 32ff 	mov.w	r2, #4294967295
 8004de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004de6:	f10a 0a01 	add.w	sl, sl, #1
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	9307      	str	r3, [sp, #28]
 8004dee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004df2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004df4:	4654      	mov	r4, sl
 8004df6:	2205      	movs	r2, #5
 8004df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dfc:	484e      	ldr	r0, [pc, #312]	@ (8004f38 <_svfiprintf_r+0x1e4>)
 8004dfe:	f000 fa61 	bl	80052c4 <memchr>
 8004e02:	9a04      	ldr	r2, [sp, #16]
 8004e04:	b9d8      	cbnz	r0, 8004e3e <_svfiprintf_r+0xea>
 8004e06:	06d0      	lsls	r0, r2, #27
 8004e08:	bf44      	itt	mi
 8004e0a:	2320      	movmi	r3, #32
 8004e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e10:	0711      	lsls	r1, r2, #28
 8004e12:	bf44      	itt	mi
 8004e14:	232b      	movmi	r3, #43	@ 0x2b
 8004e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e20:	d015      	beq.n	8004e4e <_svfiprintf_r+0xfa>
 8004e22:	4654      	mov	r4, sl
 8004e24:	2000      	movs	r0, #0
 8004e26:	f04f 0c0a 	mov.w	ip, #10
 8004e2a:	9a07      	ldr	r2, [sp, #28]
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e32:	3b30      	subs	r3, #48	@ 0x30
 8004e34:	2b09      	cmp	r3, #9
 8004e36:	d94b      	bls.n	8004ed0 <_svfiprintf_r+0x17c>
 8004e38:	b1b0      	cbz	r0, 8004e68 <_svfiprintf_r+0x114>
 8004e3a:	9207      	str	r2, [sp, #28]
 8004e3c:	e014      	b.n	8004e68 <_svfiprintf_r+0x114>
 8004e3e:	eba0 0308 	sub.w	r3, r0, r8
 8004e42:	fa09 f303 	lsl.w	r3, r9, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	46a2      	mov	sl, r4
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	e7d2      	b.n	8004df4 <_svfiprintf_r+0xa0>
 8004e4e:	9b03      	ldr	r3, [sp, #12]
 8004e50:	1d19      	adds	r1, r3, #4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	9103      	str	r1, [sp, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bfbb      	ittet	lt
 8004e5a:	425b      	neglt	r3, r3
 8004e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e60:	9307      	strge	r3, [sp, #28]
 8004e62:	9307      	strlt	r3, [sp, #28]
 8004e64:	bfb8      	it	lt
 8004e66:	9204      	strlt	r2, [sp, #16]
 8004e68:	7823      	ldrb	r3, [r4, #0]
 8004e6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e6c:	d10a      	bne.n	8004e84 <_svfiprintf_r+0x130>
 8004e6e:	7863      	ldrb	r3, [r4, #1]
 8004e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e72:	d132      	bne.n	8004eda <_svfiprintf_r+0x186>
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	3402      	adds	r4, #2
 8004e78:	1d1a      	adds	r2, r3, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	9203      	str	r2, [sp, #12]
 8004e7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e82:	9305      	str	r3, [sp, #20]
 8004e84:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004f3c <_svfiprintf_r+0x1e8>
 8004e88:	2203      	movs	r2, #3
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	7821      	ldrb	r1, [r4, #0]
 8004e8e:	f000 fa19 	bl	80052c4 <memchr>
 8004e92:	b138      	cbz	r0, 8004ea4 <_svfiprintf_r+0x150>
 8004e94:	2240      	movs	r2, #64	@ 0x40
 8004e96:	9b04      	ldr	r3, [sp, #16]
 8004e98:	eba0 000a 	sub.w	r0, r0, sl
 8004e9c:	4082      	lsls	r2, r0
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	3401      	adds	r4, #1
 8004ea2:	9304      	str	r3, [sp, #16]
 8004ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea8:	2206      	movs	r2, #6
 8004eaa:	4825      	ldr	r0, [pc, #148]	@ (8004f40 <_svfiprintf_r+0x1ec>)
 8004eac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004eb0:	f000 fa08 	bl	80052c4 <memchr>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d036      	beq.n	8004f26 <_svfiprintf_r+0x1d2>
 8004eb8:	4b22      	ldr	r3, [pc, #136]	@ (8004f44 <_svfiprintf_r+0x1f0>)
 8004eba:	bb1b      	cbnz	r3, 8004f04 <_svfiprintf_r+0x1b0>
 8004ebc:	9b03      	ldr	r3, [sp, #12]
 8004ebe:	3307      	adds	r3, #7
 8004ec0:	f023 0307 	bic.w	r3, r3, #7
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	9303      	str	r3, [sp, #12]
 8004ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eca:	4433      	add	r3, r6
 8004ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ece:	e76a      	b.n	8004da6 <_svfiprintf_r+0x52>
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ed8:	e7a8      	b.n	8004e2c <_svfiprintf_r+0xd8>
 8004eda:	2300      	movs	r3, #0
 8004edc:	f04f 0c0a 	mov.w	ip, #10
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	3401      	adds	r4, #1
 8004ee4:	9305      	str	r3, [sp, #20]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eec:	3a30      	subs	r2, #48	@ 0x30
 8004eee:	2a09      	cmp	r2, #9
 8004ef0:	d903      	bls.n	8004efa <_svfiprintf_r+0x1a6>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0c6      	beq.n	8004e84 <_svfiprintf_r+0x130>
 8004ef6:	9105      	str	r1, [sp, #20]
 8004ef8:	e7c4      	b.n	8004e84 <_svfiprintf_r+0x130>
 8004efa:	4604      	mov	r4, r0
 8004efc:	2301      	movs	r3, #1
 8004efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f02:	e7f0      	b.n	8004ee6 <_svfiprintf_r+0x192>
 8004f04:	ab03      	add	r3, sp, #12
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	462a      	mov	r2, r5
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f48 <_svfiprintf_r+0x1f4>)
 8004f0e:	a904      	add	r1, sp, #16
 8004f10:	f3af 8000 	nop.w
 8004f14:	1c42      	adds	r2, r0, #1
 8004f16:	4606      	mov	r6, r0
 8004f18:	d1d6      	bne.n	8004ec8 <_svfiprintf_r+0x174>
 8004f1a:	89ab      	ldrh	r3, [r5, #12]
 8004f1c:	065b      	lsls	r3, r3, #25
 8004f1e:	f53f af2d 	bmi.w	8004d7c <_svfiprintf_r+0x28>
 8004f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f24:	e72c      	b.n	8004d80 <_svfiprintf_r+0x2c>
 8004f26:	ab03      	add	r3, sp, #12
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	462a      	mov	r2, r5
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <_svfiprintf_r+0x1f4>)
 8004f30:	a904      	add	r1, sp, #16
 8004f32:	f000 f87d 	bl	8005030 <_printf_i>
 8004f36:	e7ed      	b.n	8004f14 <_svfiprintf_r+0x1c0>
 8004f38:	08007c7b 	.word	0x08007c7b
 8004f3c:	08007c81 	.word	0x08007c81
 8004f40:	08007c85 	.word	0x08007c85
 8004f44:	00000000 	.word	0x00000000
 8004f48:	08004c9d 	.word	0x08004c9d

08004f4c <_printf_common>:
 8004f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	4616      	mov	r6, r2
 8004f52:	4698      	mov	r8, r3
 8004f54:	688a      	ldr	r2, [r1, #8]
 8004f56:	690b      	ldr	r3, [r1, #16]
 8004f58:	4607      	mov	r7, r0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	bfb8      	it	lt
 8004f5e:	4613      	movlt	r3, r2
 8004f60:	6033      	str	r3, [r6, #0]
 8004f62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f66:	460c      	mov	r4, r1
 8004f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f6c:	b10a      	cbz	r2, 8004f72 <_printf_common+0x26>
 8004f6e:	3301      	adds	r3, #1
 8004f70:	6033      	str	r3, [r6, #0]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	0699      	lsls	r1, r3, #26
 8004f76:	bf42      	ittt	mi
 8004f78:	6833      	ldrmi	r3, [r6, #0]
 8004f7a:	3302      	addmi	r3, #2
 8004f7c:	6033      	strmi	r3, [r6, #0]
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	f015 0506 	ands.w	r5, r5, #6
 8004f84:	d106      	bne.n	8004f94 <_printf_common+0x48>
 8004f86:	f104 0a19 	add.w	sl, r4, #25
 8004f8a:	68e3      	ldr	r3, [r4, #12]
 8004f8c:	6832      	ldr	r2, [r6, #0]
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	dc2b      	bgt.n	8004fec <_printf_common+0xa0>
 8004f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	3b00      	subs	r3, #0
 8004f9c:	bf18      	it	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	0692      	lsls	r2, r2, #26
 8004fa2:	d430      	bmi.n	8005006 <_printf_common+0xba>
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fac:	47c8      	blx	r9
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d023      	beq.n	8004ffa <_printf_common+0xae>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	6922      	ldr	r2, [r4, #16]
 8004fb6:	f003 0306 	and.w	r3, r3, #6
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	bf14      	ite	ne
 8004fbe:	2500      	movne	r5, #0
 8004fc0:	6833      	ldreq	r3, [r6, #0]
 8004fc2:	f04f 0600 	mov.w	r6, #0
 8004fc6:	bf08      	it	eq
 8004fc8:	68e5      	ldreq	r5, [r4, #12]
 8004fca:	f104 041a 	add.w	r4, r4, #26
 8004fce:	bf08      	it	eq
 8004fd0:	1aed      	subeq	r5, r5, r3
 8004fd2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004fd6:	bf08      	it	eq
 8004fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	bfc4      	itt	gt
 8004fe0:	1a9b      	subgt	r3, r3, r2
 8004fe2:	18ed      	addgt	r5, r5, r3
 8004fe4:	42b5      	cmp	r5, r6
 8004fe6:	d11a      	bne.n	800501e <_printf_common+0xd2>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e008      	b.n	8004ffe <_printf_common+0xb2>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4652      	mov	r2, sl
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	47c8      	blx	r9
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d103      	bne.n	8005002 <_printf_common+0xb6>
 8004ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005002:	3501      	adds	r5, #1
 8005004:	e7c1      	b.n	8004f8a <_printf_common+0x3e>
 8005006:	2030      	movs	r0, #48	@ 0x30
 8005008:	18e1      	adds	r1, r4, r3
 800500a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005014:	4422      	add	r2, r4
 8005016:	3302      	adds	r3, #2
 8005018:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800501c:	e7c2      	b.n	8004fa4 <_printf_common+0x58>
 800501e:	2301      	movs	r3, #1
 8005020:	4622      	mov	r2, r4
 8005022:	4641      	mov	r1, r8
 8005024:	4638      	mov	r0, r7
 8005026:	47c8      	blx	r9
 8005028:	3001      	adds	r0, #1
 800502a:	d0e6      	beq.n	8004ffa <_printf_common+0xae>
 800502c:	3601      	adds	r6, #1
 800502e:	e7d9      	b.n	8004fe4 <_printf_common+0x98>

08005030 <_printf_i>:
 8005030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	7e0f      	ldrb	r7, [r1, #24]
 8005036:	4691      	mov	r9, r2
 8005038:	2f78      	cmp	r7, #120	@ 0x78
 800503a:	4680      	mov	r8, r0
 800503c:	460c      	mov	r4, r1
 800503e:	469a      	mov	sl, r3
 8005040:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005046:	d807      	bhi.n	8005058 <_printf_i+0x28>
 8005048:	2f62      	cmp	r7, #98	@ 0x62
 800504a:	d80a      	bhi.n	8005062 <_printf_i+0x32>
 800504c:	2f00      	cmp	r7, #0
 800504e:	f000 80d3 	beq.w	80051f8 <_printf_i+0x1c8>
 8005052:	2f58      	cmp	r7, #88	@ 0x58
 8005054:	f000 80ba 	beq.w	80051cc <_printf_i+0x19c>
 8005058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800505c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005060:	e03a      	b.n	80050d8 <_printf_i+0xa8>
 8005062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005066:	2b15      	cmp	r3, #21
 8005068:	d8f6      	bhi.n	8005058 <_printf_i+0x28>
 800506a:	a101      	add	r1, pc, #4	@ (adr r1, 8005070 <_printf_i+0x40>)
 800506c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005070:	080050c9 	.word	0x080050c9
 8005074:	080050dd 	.word	0x080050dd
 8005078:	08005059 	.word	0x08005059
 800507c:	08005059 	.word	0x08005059
 8005080:	08005059 	.word	0x08005059
 8005084:	08005059 	.word	0x08005059
 8005088:	080050dd 	.word	0x080050dd
 800508c:	08005059 	.word	0x08005059
 8005090:	08005059 	.word	0x08005059
 8005094:	08005059 	.word	0x08005059
 8005098:	08005059 	.word	0x08005059
 800509c:	080051df 	.word	0x080051df
 80050a0:	08005107 	.word	0x08005107
 80050a4:	08005199 	.word	0x08005199
 80050a8:	08005059 	.word	0x08005059
 80050ac:	08005059 	.word	0x08005059
 80050b0:	08005201 	.word	0x08005201
 80050b4:	08005059 	.word	0x08005059
 80050b8:	08005107 	.word	0x08005107
 80050bc:	08005059 	.word	0x08005059
 80050c0:	08005059 	.word	0x08005059
 80050c4:	080051a1 	.word	0x080051a1
 80050c8:	6833      	ldr	r3, [r6, #0]
 80050ca:	1d1a      	adds	r2, r3, #4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6032      	str	r2, [r6, #0]
 80050d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050d8:	2301      	movs	r3, #1
 80050da:	e09e      	b.n	800521a <_printf_i+0x1ea>
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	6820      	ldr	r0, [r4, #0]
 80050e0:	1d19      	adds	r1, r3, #4
 80050e2:	6031      	str	r1, [r6, #0]
 80050e4:	0606      	lsls	r6, r0, #24
 80050e6:	d501      	bpl.n	80050ec <_printf_i+0xbc>
 80050e8:	681d      	ldr	r5, [r3, #0]
 80050ea:	e003      	b.n	80050f4 <_printf_i+0xc4>
 80050ec:	0645      	lsls	r5, r0, #25
 80050ee:	d5fb      	bpl.n	80050e8 <_printf_i+0xb8>
 80050f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050f4:	2d00      	cmp	r5, #0
 80050f6:	da03      	bge.n	8005100 <_printf_i+0xd0>
 80050f8:	232d      	movs	r3, #45	@ 0x2d
 80050fa:	426d      	negs	r5, r5
 80050fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005100:	230a      	movs	r3, #10
 8005102:	4859      	ldr	r0, [pc, #356]	@ (8005268 <_printf_i+0x238>)
 8005104:	e011      	b.n	800512a <_printf_i+0xfa>
 8005106:	6821      	ldr	r1, [r4, #0]
 8005108:	6833      	ldr	r3, [r6, #0]
 800510a:	0608      	lsls	r0, r1, #24
 800510c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005110:	d402      	bmi.n	8005118 <_printf_i+0xe8>
 8005112:	0649      	lsls	r1, r1, #25
 8005114:	bf48      	it	mi
 8005116:	b2ad      	uxthmi	r5, r5
 8005118:	2f6f      	cmp	r7, #111	@ 0x6f
 800511a:	6033      	str	r3, [r6, #0]
 800511c:	bf14      	ite	ne
 800511e:	230a      	movne	r3, #10
 8005120:	2308      	moveq	r3, #8
 8005122:	4851      	ldr	r0, [pc, #324]	@ (8005268 <_printf_i+0x238>)
 8005124:	2100      	movs	r1, #0
 8005126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800512a:	6866      	ldr	r6, [r4, #4]
 800512c:	2e00      	cmp	r6, #0
 800512e:	bfa8      	it	ge
 8005130:	6821      	ldrge	r1, [r4, #0]
 8005132:	60a6      	str	r6, [r4, #8]
 8005134:	bfa4      	itt	ge
 8005136:	f021 0104 	bicge.w	r1, r1, #4
 800513a:	6021      	strge	r1, [r4, #0]
 800513c:	b90d      	cbnz	r5, 8005142 <_printf_i+0x112>
 800513e:	2e00      	cmp	r6, #0
 8005140:	d04b      	beq.n	80051da <_printf_i+0x1aa>
 8005142:	4616      	mov	r6, r2
 8005144:	fbb5 f1f3 	udiv	r1, r5, r3
 8005148:	fb03 5711 	mls	r7, r3, r1, r5
 800514c:	5dc7      	ldrb	r7, [r0, r7]
 800514e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005152:	462f      	mov	r7, r5
 8005154:	42bb      	cmp	r3, r7
 8005156:	460d      	mov	r5, r1
 8005158:	d9f4      	bls.n	8005144 <_printf_i+0x114>
 800515a:	2b08      	cmp	r3, #8
 800515c:	d10b      	bne.n	8005176 <_printf_i+0x146>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	07df      	lsls	r7, r3, #31
 8005162:	d508      	bpl.n	8005176 <_printf_i+0x146>
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	6861      	ldr	r1, [r4, #4]
 8005168:	4299      	cmp	r1, r3
 800516a:	bfde      	ittt	le
 800516c:	2330      	movle	r3, #48	@ 0x30
 800516e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005172:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005176:	1b92      	subs	r2, r2, r6
 8005178:	6122      	str	r2, [r4, #16]
 800517a:	464b      	mov	r3, r9
 800517c:	4621      	mov	r1, r4
 800517e:	4640      	mov	r0, r8
 8005180:	f8cd a000 	str.w	sl, [sp]
 8005184:	aa03      	add	r2, sp, #12
 8005186:	f7ff fee1 	bl	8004f4c <_printf_common>
 800518a:	3001      	adds	r0, #1
 800518c:	d14a      	bne.n	8005224 <_printf_i+0x1f4>
 800518e:	f04f 30ff 	mov.w	r0, #4294967295
 8005192:	b004      	add	sp, #16
 8005194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	f043 0320 	orr.w	r3, r3, #32
 800519e:	6023      	str	r3, [r4, #0]
 80051a0:	2778      	movs	r7, #120	@ 0x78
 80051a2:	4832      	ldr	r0, [pc, #200]	@ (800526c <_printf_i+0x23c>)
 80051a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	6831      	ldr	r1, [r6, #0]
 80051ac:	061f      	lsls	r7, r3, #24
 80051ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80051b2:	d402      	bmi.n	80051ba <_printf_i+0x18a>
 80051b4:	065f      	lsls	r7, r3, #25
 80051b6:	bf48      	it	mi
 80051b8:	b2ad      	uxthmi	r5, r5
 80051ba:	6031      	str	r1, [r6, #0]
 80051bc:	07d9      	lsls	r1, r3, #31
 80051be:	bf44      	itt	mi
 80051c0:	f043 0320 	orrmi.w	r3, r3, #32
 80051c4:	6023      	strmi	r3, [r4, #0]
 80051c6:	b11d      	cbz	r5, 80051d0 <_printf_i+0x1a0>
 80051c8:	2310      	movs	r3, #16
 80051ca:	e7ab      	b.n	8005124 <_printf_i+0xf4>
 80051cc:	4826      	ldr	r0, [pc, #152]	@ (8005268 <_printf_i+0x238>)
 80051ce:	e7e9      	b.n	80051a4 <_printf_i+0x174>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	f023 0320 	bic.w	r3, r3, #32
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	e7f6      	b.n	80051c8 <_printf_i+0x198>
 80051da:	4616      	mov	r6, r2
 80051dc:	e7bd      	b.n	800515a <_printf_i+0x12a>
 80051de:	6833      	ldr	r3, [r6, #0]
 80051e0:	6825      	ldr	r5, [r4, #0]
 80051e2:	1d18      	adds	r0, r3, #4
 80051e4:	6961      	ldr	r1, [r4, #20]
 80051e6:	6030      	str	r0, [r6, #0]
 80051e8:	062e      	lsls	r6, r5, #24
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	d501      	bpl.n	80051f2 <_printf_i+0x1c2>
 80051ee:	6019      	str	r1, [r3, #0]
 80051f0:	e002      	b.n	80051f8 <_printf_i+0x1c8>
 80051f2:	0668      	lsls	r0, r5, #25
 80051f4:	d5fb      	bpl.n	80051ee <_printf_i+0x1be>
 80051f6:	8019      	strh	r1, [r3, #0]
 80051f8:	2300      	movs	r3, #0
 80051fa:	4616      	mov	r6, r2
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	e7bc      	b.n	800517a <_printf_i+0x14a>
 8005200:	6833      	ldr	r3, [r6, #0]
 8005202:	2100      	movs	r1, #0
 8005204:	1d1a      	adds	r2, r3, #4
 8005206:	6032      	str	r2, [r6, #0]
 8005208:	681e      	ldr	r6, [r3, #0]
 800520a:	6862      	ldr	r2, [r4, #4]
 800520c:	4630      	mov	r0, r6
 800520e:	f000 f859 	bl	80052c4 <memchr>
 8005212:	b108      	cbz	r0, 8005218 <_printf_i+0x1e8>
 8005214:	1b80      	subs	r0, r0, r6
 8005216:	6060      	str	r0, [r4, #4]
 8005218:	6863      	ldr	r3, [r4, #4]
 800521a:	6123      	str	r3, [r4, #16]
 800521c:	2300      	movs	r3, #0
 800521e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005222:	e7aa      	b.n	800517a <_printf_i+0x14a>
 8005224:	4632      	mov	r2, r6
 8005226:	4649      	mov	r1, r9
 8005228:	4640      	mov	r0, r8
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	47d0      	blx	sl
 800522e:	3001      	adds	r0, #1
 8005230:	d0ad      	beq.n	800518e <_printf_i+0x15e>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	079b      	lsls	r3, r3, #30
 8005236:	d413      	bmi.n	8005260 <_printf_i+0x230>
 8005238:	68e0      	ldr	r0, [r4, #12]
 800523a:	9b03      	ldr	r3, [sp, #12]
 800523c:	4298      	cmp	r0, r3
 800523e:	bfb8      	it	lt
 8005240:	4618      	movlt	r0, r3
 8005242:	e7a6      	b.n	8005192 <_printf_i+0x162>
 8005244:	2301      	movs	r3, #1
 8005246:	4632      	mov	r2, r6
 8005248:	4649      	mov	r1, r9
 800524a:	4640      	mov	r0, r8
 800524c:	47d0      	blx	sl
 800524e:	3001      	adds	r0, #1
 8005250:	d09d      	beq.n	800518e <_printf_i+0x15e>
 8005252:	3501      	adds	r5, #1
 8005254:	68e3      	ldr	r3, [r4, #12]
 8005256:	9903      	ldr	r1, [sp, #12]
 8005258:	1a5b      	subs	r3, r3, r1
 800525a:	42ab      	cmp	r3, r5
 800525c:	dcf2      	bgt.n	8005244 <_printf_i+0x214>
 800525e:	e7eb      	b.n	8005238 <_printf_i+0x208>
 8005260:	2500      	movs	r5, #0
 8005262:	f104 0619 	add.w	r6, r4, #25
 8005266:	e7f5      	b.n	8005254 <_printf_i+0x224>
 8005268:	08007c8c 	.word	0x08007c8c
 800526c:	08007c9d 	.word	0x08007c9d

08005270 <memmove>:
 8005270:	4288      	cmp	r0, r1
 8005272:	b510      	push	{r4, lr}
 8005274:	eb01 0402 	add.w	r4, r1, r2
 8005278:	d902      	bls.n	8005280 <memmove+0x10>
 800527a:	4284      	cmp	r4, r0
 800527c:	4623      	mov	r3, r4
 800527e:	d807      	bhi.n	8005290 <memmove+0x20>
 8005280:	1e43      	subs	r3, r0, #1
 8005282:	42a1      	cmp	r1, r4
 8005284:	d008      	beq.n	8005298 <memmove+0x28>
 8005286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800528a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800528e:	e7f8      	b.n	8005282 <memmove+0x12>
 8005290:	4601      	mov	r1, r0
 8005292:	4402      	add	r2, r0
 8005294:	428a      	cmp	r2, r1
 8005296:	d100      	bne.n	800529a <memmove+0x2a>
 8005298:	bd10      	pop	{r4, pc}
 800529a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800529e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052a2:	e7f7      	b.n	8005294 <memmove+0x24>

080052a4 <_sbrk_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	2300      	movs	r3, #0
 80052a8:	4d05      	ldr	r5, [pc, #20]	@ (80052c0 <_sbrk_r+0x1c>)
 80052aa:	4604      	mov	r4, r0
 80052ac:	4608      	mov	r0, r1
 80052ae:	602b      	str	r3, [r5, #0]
 80052b0:	f7fd fb02 	bl	80028b8 <_sbrk>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d102      	bne.n	80052be <_sbrk_r+0x1a>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	b103      	cbz	r3, 80052be <_sbrk_r+0x1a>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	200006c8 	.word	0x200006c8

080052c4 <memchr>:
 80052c4:	4603      	mov	r3, r0
 80052c6:	b510      	push	{r4, lr}
 80052c8:	b2c9      	uxtb	r1, r1
 80052ca:	4402      	add	r2, r0
 80052cc:	4293      	cmp	r3, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	d101      	bne.n	80052d6 <memchr+0x12>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e003      	b.n	80052de <memchr+0x1a>
 80052d6:	7804      	ldrb	r4, [r0, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	428c      	cmp	r4, r1
 80052dc:	d1f6      	bne.n	80052cc <memchr+0x8>
 80052de:	bd10      	pop	{r4, pc}

080052e0 <memcpy>:
 80052e0:	440a      	add	r2, r1
 80052e2:	4291      	cmp	r1, r2
 80052e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80052e8:	d100      	bne.n	80052ec <memcpy+0xc>
 80052ea:	4770      	bx	lr
 80052ec:	b510      	push	{r4, lr}
 80052ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f2:	4291      	cmp	r1, r2
 80052f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052f8:	d1f9      	bne.n	80052ee <memcpy+0xe>
 80052fa:	bd10      	pop	{r4, pc}

080052fc <_realloc_r>:
 80052fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005300:	4680      	mov	r8, r0
 8005302:	4615      	mov	r5, r2
 8005304:	460c      	mov	r4, r1
 8005306:	b921      	cbnz	r1, 8005312 <_realloc_r+0x16>
 8005308:	4611      	mov	r1, r2
 800530a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800530e:	f7ff bc39 	b.w	8004b84 <_malloc_r>
 8005312:	b92a      	cbnz	r2, 8005320 <_realloc_r+0x24>
 8005314:	f7ff fbcc 	bl	8004ab0 <_free_r>
 8005318:	2400      	movs	r4, #0
 800531a:	4620      	mov	r0, r4
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	f000 f81a 	bl	8005358 <_malloc_usable_size_r>
 8005324:	4285      	cmp	r5, r0
 8005326:	4606      	mov	r6, r0
 8005328:	d802      	bhi.n	8005330 <_realloc_r+0x34>
 800532a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800532e:	d8f4      	bhi.n	800531a <_realloc_r+0x1e>
 8005330:	4629      	mov	r1, r5
 8005332:	4640      	mov	r0, r8
 8005334:	f7ff fc26 	bl	8004b84 <_malloc_r>
 8005338:	4607      	mov	r7, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	d0ec      	beq.n	8005318 <_realloc_r+0x1c>
 800533e:	42b5      	cmp	r5, r6
 8005340:	462a      	mov	r2, r5
 8005342:	4621      	mov	r1, r4
 8005344:	bf28      	it	cs
 8005346:	4632      	movcs	r2, r6
 8005348:	f7ff ffca 	bl	80052e0 <memcpy>
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f7ff fbae 	bl	8004ab0 <_free_r>
 8005354:	463c      	mov	r4, r7
 8005356:	e7e0      	b.n	800531a <_realloc_r+0x1e>

08005358 <_malloc_usable_size_r>:
 8005358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800535c:	1f18      	subs	r0, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	bfbc      	itt	lt
 8005362:	580b      	ldrlt	r3, [r1, r0]
 8005364:	18c0      	addlt	r0, r0, r3
 8005366:	4770      	bx	lr

08005368 <_init>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	bf00      	nop
 800536c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536e:	bc08      	pop	{r3}
 8005370:	469e      	mov	lr, r3
 8005372:	4770      	bx	lr

08005374 <_fini>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	bf00      	nop
 8005378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537a:	bc08      	pop	{r3}
 800537c:	469e      	mov	lr, r3
 800537e:	4770      	bx	lr
